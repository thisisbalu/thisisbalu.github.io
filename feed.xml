<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://balasubramanyamlanka.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://balasubramanyamlanka.com/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-12-07T02:31:23+00:00</updated><id>https://balasubramanyamlanka.com/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Quick Cheatsheet: Remove New Lines and Empty Lines in Linux</title><link href="https://balasubramanyamlanka.com/quick-cheatsheet-remove-new-lines-and-empty-lines-in-linux-like-a-boss/" rel="alternate" type="text/html" title="Quick Cheatsheet: Remove New Lines and Empty Lines in Linux"/><published>2024-12-06T12:30:27+00:00</published><updated>2024-12-06T12:30:27+00:00</updated><id>https://balasubramanyamlanka.com/quick-cheatsheet:-remove-new-lines-and-empty-lines-in-linux-like-a-boss</id><content type="html" xml:base="https://balasubramanyamlanka.com/quick-cheatsheet-remove-new-lines-and-empty-lines-in-linux-like-a-boss/"><![CDATA[<hr/> <p>You know how sometimes you’re knee-deep in some file, and it’s just cluttered with new lines or annoying empty lines? Yeah, that’s the kind of crap that can drive you mad. Don’t you wish there was an easy way to wipe that all away? Well, I’ve got your back. Get ready to transform your files into neat little packages with just a few commands.</p> <h3 id="removing-new-lines">Removing New Lines</h3> <p>First off, let’s tackle those pesky new lines. Sometimes, you end up with new lines all over the place, messing up your formatting. Here’s a quick command you can run to sweep them away.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Use this command to remove all new lines</span>
<span class="nb">tr</span> <span class="nt">-d</span> <span class="s1">'\n'</span> &lt; input.txt <span class="o">&gt;</span> output.txt
</code></pre></div></div> <p>This little gem uses <code class="language-plaintext highlighter-rouge">tr</code> (translate or delete characters). It takes our beloved input file, targets new lines with <code class="language-plaintext highlighter-rouge">-d '\n'</code>, and outputs a cleaned-up version in <code class="language-plaintext highlighter-rouge">output.txt</code>. Pretty cool, right?</p> <p>But if you only want to remove <strong>trailing</strong> new lines rather than every single one, you can use <code class="language-plaintext highlighter-rouge">sed</code> like this:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># To trim trailing new lines only</span>
<span class="nb">sed</span> <span class="s1">'/^$/d'</span> input.txt <span class="o">&gt;</span> output.txt
</code></pre></div></div> <p>This one-liner gets rid of empty lines. The <code class="language-plaintext highlighter-rouge">^$</code> regex matches any lines that start and end with nothing (a.k.a. empty lines). The <code class="language-plaintext highlighter-rouge">d</code> command deletes those lines.</p> <h3 id="removing-empty-new-lines">Removing Empty New Lines</h3> <p>Okay, now let’s get to that annoying issue of empty new lines, which just clutter up your file without adding any value. Here’s another handy command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Removing consecutive empty lines</span>
<span class="nb">sed</span> <span class="s1">'/^$/N;/^\n$/D'</span> input.txt <span class="o">&gt;</span> output.txt
</code></pre></div></div> <p>This one uses <code class="language-plaintext highlighter-rouge">sed</code> again, and is a bit of a magic trick. What happens here is we look for empty lines and merge them (<code class="language-plaintext highlighter-rouge">N</code>) with the next line, then delete (<code class="language-plaintext highlighter-rouge">D</code>) if both are empty. Result? You get a file that’s compact and clean!</p> <h3 id="additional-hacks">Additional Hacks</h3> <p>You might want to ensure that there are <em>no</em> empty lines either at the start or the end of your file. Here’s a two-in-one command to handle that:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Primary command to remove empty lines throughout the file and trim the ends</span>
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'/^$/d; /^$/N; /^\n$/D'</span> input.txt
</code></pre></div></div> <p>This <code class="language-plaintext highlighter-rouge">-i</code> option edits files in place. Yup, there’s no output redirection here—your original file gets the treatment and comes out sparkling clean.</p> <h3 id="not-just-text-files">Not Just Text Files!</h3> <p>You don’t just have to limit this to text files, either! If you’re working with other types of files, sometimes using <code class="language-plaintext highlighter-rouge">tr</code> or <code class="language-plaintext highlighter-rouge">sed</code> can help with quick and dirty edits without needing to open a GUI editor. Just be cautious, ‘cause you could mess something up if you’re not careful.</p> <h3 id="conclusion">Conclusion</h3> <p>So there you have it, folks! A quick cheatsheet to help you out when lines get out of hand. You no longer have to deal with end-of-the-world scenarios caused by messy files. Your code will thank you, and you can keep your sanity intact whilst making your files readable again.</p> <h3 id="references">References</h3> <ul> <li><a href="https://www.gnu.org/software/coreutils/manual/html_node/tr.html">GNU <code class="language-plaintext highlighter-rouge">tr</code></a></li> <li><a href="https://www.gnu.org/software/sed/manual/sed.html">GNU <code class="language-plaintext highlighter-rouge">sed</code></a></li> </ul>]]></content><author><name></name></author><category term="Linux"/><category term="Programming"/><category term="Command Line"/><category term="Productivity"/><summary type="html"><![CDATA[This article breaks down some quick commands to tidy up files in Linux by removing unwanted new lines and those pesky empty lines. Keep your files clean and readable without breaking a sweat!]]></summary></entry><entry><title type="html">LeetCode 977: Squares of a Sorted Array Solution</title><link href="https://balasubramanyamlanka.com/leetcode-977-squares-of-a-sorted-array-solution/" rel="alternate" type="text/html" title="LeetCode 977: Squares of a Sorted Array Solution"/><published>2024-12-05T23:38:12+00:00</published><updated>2024-12-05T23:38:12+00:00</updated><id>https://balasubramanyamlanka.com/leetcode-977:-squares-of-a-sorted-array-solution</id><content type="html" xml:base="https://balasubramanyamlanka.com/leetcode-977-squares-of-a-sorted-array-solution/"><![CDATA[<hr/> <p>Let’s tackle LeetCode 977: Squares of a Sorted Array. Yeah, if you’ve spent any time on LeetCode, you know where we’re headed with this one. It’s all about taking a sorted array of integers, squaring them, and returning them in the same sorted order. Sounds simple, right? Well, there’s always a twist with these problems.</p> <h2 id="problem-statement">Problem Statement</h2> <p>Given an integer array <code class="language-plaintext highlighter-rouge">nums</code> sorted in non-decreasing order, return an array of the squares of each number, also in non-decreasing order.</p> <h3 id="example">Example</h3> <ul> <li>Input: <code class="language-plaintext highlighter-rouge">nums = [-4,-1,0,3,10]</code></li> <li>Output: <code class="language-plaintext highlighter-rouge">[0, 1, 9, 16, 100]</code></li> </ul> <h2 id="my-solution">My Solution</h2> <p>Here’s the Java code I cooked up for this problem:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">sortedSquares</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">result</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">square</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">])</span> <span class="o">&gt;</span> <span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">]))</span> <span class="o">{</span>
                <span class="n">square</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">];</span>
                <span class="n">left</span><span class="o">++;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">square</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">];</span>
                <span class="n">right</span><span class="o">--;</span>
            <span class="o">}</span>
            <span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">square</span> <span class="o">*</span> <span class="n">square</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <h2 id="complexity-analysis">Complexity Analysis</h2> <ul> <li><strong>Time Complexity</strong>: O(n) — We are only making a single pass through the array.</li> <li><strong>Space Complexity</strong>: O(n) — We are using a new array to hold the results.</li> </ul> <h2 id="conclusion">Conclusion</h2> <p>And there you have it! By using a two-pointer technique, we’ve managed to solve this problem in linear time. It’s efficient, neat, and gets the job done without breaking a sweat. Now, all that’s left is to keep grinding those LeetCode problems. If you enjoyed this breakdown or have any questions, feel free to drop a comment!</p> <h2 id="references">References</h2> <ul> <li><a href="https://leetcode.com/problems/squares-of-a-sorted-array/">LeetCode Problem 977 - Squares of a Sorted Array</a></li> <li><a href="https://www.geeksforgeeks.org/two-pointers-technique/">Two Pointers Technique Explained</a></li> </ul> <p>Happy coding! 🖖</p>]]></content><author><name></name></author><category term="LeetCode"/><category term="Programming Challenges"/><category term="Coding"/><category term="Algorithms"/><summary type="html"><![CDATA[In this post, I'm sharing my solution for LeetCode problem 977 - Squares of a Sorted Array. Let's dive into some coding magic and tackle problem-solving head-on!]]></summary></entry><entry><title type="html">LeetCode Question 383: Ransom Note Solution Breakdown</title><link href="https://balasubramanyamlanka.com/leetcode-question-383-ransom-note-solution-breakdown/" rel="alternate" type="text/html" title="LeetCode Question 383: Ransom Note Solution Breakdown"/><published>2024-12-05T00:43:10+00:00</published><updated>2024-12-05T00:43:10+00:00</updated><id>https://balasubramanyamlanka.com/leetcode-question-383:-ransom-note-solution-breakdown</id><content type="html" xml:base="https://balasubramanyamlanka.com/leetcode-question-383-ransom-note-solution-breakdown/"><![CDATA[<hr/> <h3 id="problem-statement">Problem Statement</h3> <p>The problem states:</p> <p>Given two strings <code class="language-plaintext highlighter-rouge">ransomNote</code> and <code class="language-plaintext highlighter-rouge">magazine</code>, return <code class="language-plaintext highlighter-rouge">true</code> if you can construct the <code class="language-plaintext highlighter-rouge">ransomNote</code> from the <code class="language-plaintext highlighter-rouge">magazine</code> and <code class="language-plaintext highlighter-rouge">false</code> otherwise.</p> <p>Each letter in the <code class="language-plaintext highlighter-rouge">magazine</code> can only be used once in the <code class="language-plaintext highlighter-rouge">ransomNote</code>.</p> <p>So, if you’re wondering whether you have enough letters in the magazine to create a ransom note, this is the problem that will help you check!</p> <h3 id="my-solution">My Solution</h3> <p>After scratching my head for a bit (and sipping on some of that sweet, sweet coffee), I came up with a solution in Java. Here’s the code I submitted:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">canConstruct</span><span class="o">(</span><span class="nc">String</span> <span class="n">ransomNote</span><span class="o">,</span> <span class="nc">String</span> <span class="n">magazine</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">magazineLetter</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>

        <span class="c1">// Count each letter's occurrences in the magazine</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">magazine</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">char</span> <span class="n">m</span> <span class="o">=</span> <span class="n">magazine</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="kt">int</span> <span class="n">currentCount</span> <span class="o">=</span> <span class="n">magazineLetter</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">m</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
            <span class="n">magazineLetter</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">m</span><span class="o">,</span> <span class="n">currentCount</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">// Check each letter in the ransom note</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ransomNote</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">char</span> <span class="n">r</span> <span class="o">=</span> <span class="n">ransomNote</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="kt">int</span> <span class="n">currentCount</span> <span class="o">=</span> <span class="n">magazineLetter</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">r</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">currentCount</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span> <span class="c1">// Not enough letters</span>
            <span class="o">}</span>
            <span class="n">magazineLetter</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">r</span><span class="o">,</span> <span class="n">currentCount</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span> <span class="c1">// Use one letter</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span> <span class="c1">// Successfully constructed the ransom note</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <h3 id="complexity-analysis">Complexity Analysis</h3> <ul> <li> <p><strong>Time Complexity:</strong> O(m + n), where m is the length of the <code class="language-plaintext highlighter-rouge">magazine</code> and n is the length of the <code class="language-plaintext highlighter-rouge">ransomNote</code>. We traverse both strings linearly, so this is pretty efficient.</p> </li> <li> <p><strong>Space Complexity:</strong> O(1) in terms of the character set size, since we’re only using a fixed-size <code class="language-plaintext highlighter-rouge">HashMap</code> for the alphabet (assuming we’re only dealing with standard English letters).</p> </li> </ul> <p>So yeah, overall it’s a pretty neat and efficient solution!</p> <h3 id="conclusion">Conclusion</h3> <p>And there you have it, folks. I just walked you through my thought process and solution for LeetCode problem 383. If you’re diving into the world of algorithms and data structures, it’s super important to keep practicing, and I’m here to document my grind.</p> <p>Feel free to hit me up with your own solutions or questions in the comments. Let’s keep this programming journey rolling!</p> <h3 id="references">References</h3> <ul> <li><a href="https://leetcode.com/problems/ransom-note/">LeetCode Problem 383</a></li> </ul>]]></content><author><name></name></author><category term="LeetCode"/><category term="Programming Challenges"/><category term="Java"/><category term="Algorithms"/><summary type="html"><![CDATA[In this post, I'll walk you through my daily grind of solving LeetCode problems, focusing on problem 383: Ransom Note. Get ready for some code!]]></summary></entry><entry><title type="html">Solving LeetCode Problem 876: Middle of the Linked List</title><link href="https://balasubramanyamlanka.com/solving-leetcode-problem-876-middle-of-the-linked-list/" rel="alternate" type="text/html" title="Solving LeetCode Problem 876: Middle of the Linked List"/><published>2024-12-05T00:42:06+00:00</published><updated>2024-12-05T00:42:06+00:00</updated><id>https://balasubramanyamlanka.com/solving-leetcode-problem-876:-middle-of-the-linked-list</id><content type="html" xml:base="https://balasubramanyamlanka.com/solving-leetcode-problem-876-middle-of-the-linked-list/"><![CDATA[<h3 id="the-question">The Question</h3> <p>The problem states:</p> <blockquote> <p>Given the head of a singly linked list, return the middle node of the linked list. If there are two middle nodes, return the second middle node.</p> </blockquote> <p>So, if you have a linked list like this:<br/> 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5<br/> Your answer should be the node with value 3 since it’s the middle. But if you had 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6, you should return the node with value 4 because there’s a tie!</p> <h3 id="my-solution">My Solution</h3> <p>Alright, let’s get to the juicy part—here’s how I solved this problem. The classic approach here uses a two-pointer technique: a slow pointer and a fast pointer. The fast pointer moves twice as fast as the slow one. When the fast pointer reaches the end of the list, the slow pointer will be at the middle. Here’s the code:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/** 
 * Definition for singly-linked list. 
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ListNode</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">val</span><span class="o">;</span>
    <span class="nc">ListNode</span> <span class="n">next</span><span class="o">;</span>
    <span class="nc">ListNode</span><span class="o">()</span> <span class="o">{}</span>
    <span class="nc">ListNode</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">val</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nc">ListNode</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">,</span> <span class="nc">ListNode</span> <span class="n">next</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">val</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">ListNode</span> <span class="nf">middleNode</span><span class="o">(</span><span class="nc">ListNode</span> <span class="n">head</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ListNode</span> <span class="n">slowPointer</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
        <span class="nc">ListNode</span> <span class="n">fastPointer</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
        
        <span class="c1">// Move fast pointer 2 nodes and slow pointer 1 node at a time</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">fastPointer</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">fastPointer</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">fastPointer</span> <span class="o">=</span> <span class="n">fastPointer</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
            <span class="n">slowPointer</span> <span class="o">=</span> <span class="n">slowPointer</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">slowPointer</span><span class="o">;</span> <span class="c1">// When fastPointer reaches the end, slowPointer is at the middle</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <h3 id="complexity-analysis">Complexity Analysis</h3> <p>Now, let’s break down the complexities, shall we?</p> <ul> <li><strong>Time Complexity</strong>: O(n) – We need to traverse the list just once to find the middle node. Simple enough, right?</li> <li><strong>Space Complexity</strong>: O(1) – We’re not using any extra space here apart from a couple of pointers, which is pretty damn efficient.</li> </ul> <p>References:</p> <ul> <li><a href="https://leetcode.com/problems/middle-of-the-linked-list/">LeetCode Problem 876</a></li> <li><a href="https://www.geeksforgeeks.org/two-pointer-technique/">Two-pointer Technique Overview</a></li> </ul> <p>Catch you later! Happy coding!</p>]]></content><author><name></name></author><category term="LeetCode"/><category term="Algorithms"/><category term="Linked List"/><category term="Coding Problems"/><summary type="html"><![CDATA[In this article, I'm diving into LeetCode Problem 876, where I'll walk you through my solution to finding the middle of a linked list. Strap in for some laid-back coding insights!]]></summary></entry><entry><title type="html">LeetCode Question 1342: Number of Steps to Reduce a Number to Zero - My Simple Solution</title><link href="https://balasubramanyamlanka.com/leetcode-question-1342-number-of-steps-to-reduce-a-number-to-zero-my-simple-solution/" rel="alternate" type="text/html" title="LeetCode Question 1342: Number of Steps to Reduce a Number to Zero - My Simple Solution"/><published>2024-12-05T00:38:44+00:00</published><updated>2024-12-05T00:38:44+00:00</updated><id>https://balasubramanyamlanka.com/leetcode-question-1342:-number-of-steps-to-reduce-a-number-to-zero---my-simple-solution</id><content type="html" xml:base="https://balasubramanyamlanka.com/leetcode-question-1342-number-of-steps-to-reduce-a-number-to-zero-my-simple-solution/"><![CDATA[<p>Let’s kick things off with the problem statement. The challenge is to find out how many steps it takes to reduce a number to zero, where the steps are defined as follows:</p> <ul> <li>If the number is even, divide it by 2.</li> <li>If it’s odd, subtract 1 from it.</li> </ul> <p>Sounds straightforward, right? Like, how hard can it be to reduce an integer to zero with just those two operations? Well, let’s throw some Java code into the mix to show you how it’s done!</p> <h3 id="my-java-solution">My Java Solution</h3> <p>Here’s the code I came up with:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">numberOfSteps</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// This will count our steps</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">num</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">i</span><span class="o">++;</span> <span class="c1">// Increment step count</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">num</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">num</span> <span class="o">=</span> <span class="n">num</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span> <span class="c1">// Even, so divide</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">num</span> <span class="o">=</span> <span class="n">num</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// Odd, so subtract</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">i</span><span class="o">;</span> <span class="c1">// Return total steps taken</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <h3 id="a-quick-example">A Quick Example</h3> <p>Let’s see this in action with an example.</p> <p>Say the input is <code class="language-plaintext highlighter-rouge">num = 14</code>. Here’s how the steps would play out:</p> <ul> <li>Start with <code class="language-plaintext highlighter-rouge">14</code> (even) → divide by <code class="language-plaintext highlighter-rouge">2</code> → <code class="language-plaintext highlighter-rouge">7</code></li> <li><code class="language-plaintext highlighter-rouge">7</code> (odd) → subtract <code class="language-plaintext highlighter-rouge">1</code> → <code class="language-plaintext highlighter-rouge">6</code></li> <li><code class="language-plaintext highlighter-rouge">6</code> (even) → divide by <code class="language-plaintext highlighter-rouge">2</code> → <code class="language-plaintext highlighter-rouge">3</code></li> <li><code class="language-plaintext highlighter-rouge">3</code> (odd) → subtract <code class="language-plaintext highlighter-rouge">1</code> → <code class="language-plaintext highlighter-rouge">2</code></li> <li><code class="language-plaintext highlighter-rouge">2</code> (even) → divide by <code class="language-plaintext highlighter-rouge">2</code> → <code class="language-plaintext highlighter-rouge">1</code></li> <li><code class="language-plaintext highlighter-rouge">1</code> (odd) → subtract <code class="language-plaintext highlighter-rouge">1</code> → <code class="language-plaintext highlighter-rouge">0</code></li> </ul> <p>So, the total steps would be <code class="language-plaintext highlighter-rouge">6</code>.</p> <h3 id="performance-and-complexity">Performance and Complexity</h3> <p>In terms of performance:</p> <ul> <li><strong>Time Complexity</strong>: O(log n) — This is because every time you divide by 2, you effectively halve the number of operations needed.</li> <li><strong>Space Complexity</strong>: O(1) — We’re only using a fixed amount of space (the variable <code class="language-plaintext highlighter-rouge">i</code>).</li> </ul> <h3 id="references">References</h3> <ul> <li><a href="https://leetcode.com/problems/number-of-steps-to-reduce-a-number-to-zero/">LeetCode Problem 1342</a></li> <li><a href="https://docs.oracle.com/javase/8/docs/api/">Java Documentation</a><br/> Happy coding!</li> </ul>]]></content><author><name></name></author><category term="LeetCode"/><category term="Programming Challenges"/><category term="Java"/><category term="Coding"/><summary type="html"><![CDATA[In this post, I’ll walk you through my solution for LeetCode problem 1342—how to reduce a number to zero step by step. Let’s dive into the code and break it down!]]></summary></entry><entry><title type="html">Leetcode Question 412: Fizz Buzz - My Simple Solution</title><link href="https://balasubramanyamlanka.com/leetcode-question-412-fizz-buzz-my-simple-solution/" rel="alternate" type="text/html" title="Leetcode Question 412: Fizz Buzz - My Simple Solution"/><published>2024-12-05T00:36:10+00:00</published><updated>2024-12-05T00:36:10+00:00</updated><id>https://balasubramanyamlanka.com/leetcode-question-412:-fizz-buzz---my-simple-solution</id><content type="html" xml:base="https://balasubramanyamlanka.com/leetcode-question-412-fizz-buzz-my-simple-solution/"><![CDATA[<h3 id="the-fizz-buzz-problem">The Fizz Buzz Problem</h3> <p>Here’s the deal: you get a number <code class="language-plaintext highlighter-rouge">n</code>, and your task is to print an array with the numbers from 1 to <code class="language-plaintext highlighter-rouge">n</code>, but instead of multiples of 3, you do “Fizz”, multiples of 5 become “Buzz”, and for numbers that are multiples of both 3 and 5, you print “FizzBuzz”. Pretty straightforward, right? Let’s break it down.</p> <p>Here’s the full problem statement if you want to check it out:</p> <ul> <li>Write a program that outputs the string representation of numbers from 1 to <code class="language-plaintext highlighter-rouge">n</code>.</li> <li>But for multiples of three it should output “Fizz” instead of the number.</li> <li>For the multiples of five output “Buzz”.</li> <li>For numbers which are multiples of both three and five output “FizzBuzz”.</li> </ul> <h3 id="my-fizz-buzz-solution">My Fizz Buzz Solution</h3> <p>Here’s how I whipped this up in Java:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">fizzBuzz</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">answer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">ans</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">ans</span> <span class="o">+=</span> <span class="s">"Fizz"</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">ans</span> <span class="o">+=</span> <span class="s">"Buzz"</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">ans</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">ans</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="n">answer</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">ans</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <h3 id="complexity-analysis">Complexity Analysis</h3> <p>Now, let’s chat about performance because, let’s face it, nobody likes shit code that runs like a snail.</p> <ul> <li> <p><strong>Time Complexity</strong>: This bad boy runs in O(n) time because we’re looping through numbers from 1 to <code class="language-plaintext highlighter-rouge">n</code>. Each iteration checks conditions and does basic string operations, so there are no hidden surprises here.</p> </li> <li> <p><strong>Space Complexity</strong>: The space complexity is O(n) as well because we’re storing up to <code class="language-plaintext highlighter-rouge">n</code> strings in our list. That’s pretty standard for problems that require returning collections.</p> </li> </ul> <p>References:</p> <ul> <li><a href="https://leetcode.com/problems/fizz-buzz/">Leetcode Problem 412: Fizz Buzz</a></li> <li><a href="https://docs.oracle.com/javase/8/docs/api/">Java Documentation</a></li> </ul> <p>And that’s a wrap, folks! Happy coding, and remember: keep it funky.</p>]]></content><author><name></name></author><category term="Programming"/><category term="Leetcode"/><category term="FizzBuzz"/><category term="CodingChallenges"/><summary type="html"><![CDATA[In this post, I’m sharing my resolution to Leetcode’s Fizz Buzz problem. It’s simple yet useful, so let's dive in together!]]></summary></entry><entry><title type="html">LeetCode Problem 1672: Solving the Richest Customer Wealth Challenge</title><link href="https://balasubramanyamlanka.com/leetcode-problem-1672-solving-the-richest-customer-wealth-challenge/" rel="alternate" type="text/html" title="LeetCode Problem 1672: Solving the Richest Customer Wealth Challenge"/><published>2024-12-05T00:31:05+00:00</published><updated>2024-12-05T00:31:05+00:00</updated><id>https://balasubramanyamlanka.com/leetcode-problem-1672:-solving-the-richest-customer-wealth-challenge</id><content type="html" xml:base="https://balasubramanyamlanka.com/leetcode-problem-1672-solving-the-richest-customer-wealth-challenge/"><![CDATA[<h3 id="the-problem">The Problem</h3> <p>You’re given a 2D array <code class="language-plaintext highlighter-rouge">accounts</code>, where each row represents a customer, and each column represents the amount of money they have in different banks. Your job is to find out which customer is the richest. In other words, you need to find out the maximum wealth among all customers.</p> <p>Visualize it like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>accounts = [[1, 2, 3],
            [3, 2, 1],
            [4, 5, 6]]
</code></pre></div></div> <p>Here, the first customer has wealth of 6, the second has 6 as well, and the third has 15. So the answer is 15.</p> <h3 id="the-solution">The Solution</h3> <p>Here’s how I went about solving this thing in Java. I mean, it’s pretty basic but hey, it works like a charm! Here’s the code:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">maximumWealth</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">accounts</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">richKid</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>  <span class="c1">// Store the wealth of the richest customer</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">accounts</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>  <span class="c1">// Loop through each customer</span>
            <span class="kt">int</span> <span class="n">custWealth</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>  <span class="c1">// Reset customer's wealth for each customer</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">accounts</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>  <span class="c1">// Loop through each bank account</span>
                <span class="n">custWealth</span> <span class="o">+=</span> <span class="n">accounts</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>  <span class="c1">// Add the wealth for this customer</span>
            <span class="o">}</span>
            <span class="c1">// Update richKid if current customer's wealth is greater</span>
            <span class="n">richKid</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">richKid</span><span class="o">,</span> <span class="n">custWealth</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">richKid</span><span class="o">;</span>  <span class="c1">// Return the maximum wealth found</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <h3 id="complexity">Complexity</h3> <ul> <li><strong>Time Complexity</strong>: O(m * n), where m is the number of customers and n is the number of banks. Clearly, we’re checking every account for every customer.</li> <li><strong>Space Complexity</strong>: O(1), since we’re using only a few additional variables for calculations.</li> </ul> <h3 id="references">References</h3> <ul> <li><a href="https://leetcode.com/problems/richest-customer-wealth/">LeetCode Problem 1672</a></li> <li><a href="https://docs.oracle.com/javase/8/docs/api/">Java Documentation</a></li> </ul>]]></content><author><name></name></author><category term="Programming"/><category term="LeetCode Solutions"/><category term="Java"/><category term="Algorithm"/><summary type="html"><![CDATA[Dive into my journey of tackling LeetCode problem 1672, where I dissect the simplest way to find the richest customer in a matrix of accounts. Grab a coffee and let's code!]]></summary></entry><entry><title type="html">LeetCode Problem 1480: Sum</title><link href="https://balasubramanyamlanka.com/getting-the-running-sum-on-leetcode-simple-solutions-for-everyday-problems/" rel="alternate" type="text/html" title="LeetCode Problem 1480: Sum"/><published>2024-12-05T00:26:07+00:00</published><updated>2024-12-05T00:26:07+00:00</updated><id>https://balasubramanyamlanka.com/getting-the-running-sum-on-leetcode:-simple-solutions-for-everyday-problems</id><content type="html" xml:base="https://balasubramanyamlanka.com/getting-the-running-sum-on-leetcode-simple-solutions-for-everyday-problems/"><![CDATA[<hr/> <h2 id="the-problem">The Problem</h2> <p>The challenge is pretty straightforward: you’re given an array of integers and you need to return a new array where each element is the running sum of the previous elements in the input array. The running sum at index (i) is defined as the sum of all elements from index 0 to index (i).</p> <p>For example, if you have an input array:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1, 2, 3, 4]
</code></pre></div></div> <p>The output should be:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1, 3, 6, 10]
</code></pre></div></div> <p>Pretty simple, right? It’s like that moment when you realize that your snack stash has been dwindling down to nothing while you’re binge-watching your favorite series… suddenly you’ve eaten all the chips! Anyway, let’s code!</p> <h2 id="the-solution">The Solution</h2> <p>Alright, let me break down the code I submitted for this problem. I crafted a neat little Java solution that does the job in one pass. Here it is:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span> 
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">runningSum</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span> 
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span> 
            <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span> 
        <span class="o">}</span> 
        <span class="k">return</span> <span class="n">nums</span><span class="o">;</span> 
    <span class="o">}</span> 
<span class="o">}</span>
</code></pre></div></div> <h3 id="complexity-analysis">Complexity Analysis</h3> <p>Let’s talk performance real quick.</p> <ul> <li><strong>Time Complexity</strong>: O(n), where n is the number of elements in the input array. You’re only looping through the array once!</li> <li><strong>Space Complexity</strong>: O(1), because we’re modifying the input array in place. Just imagine how cluttered your workspace would be if you had to pull out new containers for everything… Not cool!</li> </ul> <p>References:</p> <ul> <li><a href="https://leetcode.com/problems/running-sum-of-1d-array/">LeetCode - Running Sum of 1-D Array</a></li> </ul>]]></content><author><name></name></author><category term="LeetCode"/><category term="Programming"/><category term="Java"/><category term="Algorithms"/><summary type="html"><![CDATA[Join me as I walk through my daily grind of solving LeetCode problems. Today, I’m sharing my take on the Running Sum challenge with a simple Java solution!]]></summary></entry><entry><title type="html">Mastering Kubernetes Limits and Requests: A Programmer’s Guide to Staying in Control</title><link href="https://balasubramanyamlanka.com/mastering-kubernetes-limits-and-requests-a-programmer's-guide-to-staying-in-control/" rel="alternate" type="text/html" title="Mastering Kubernetes Limits and Requests: A Programmer’s Guide to Staying in Control"/><published>2024-12-03T05:45:42+00:00</published><updated>2024-12-03T05:45:42+00:00</updated><id>https://balasubramanyamlanka.com/mastering-kubernetes-limits-and-requests:-a-programmer&apos;s-guide-to-staying-in-control</id><content type="html" xml:base="https://balasubramanyamlanka.com/mastering-kubernetes-limits-and-requests-a-programmer&apos;s-guide-to-staying-in-control/"><![CDATA[<hr/> <p>Hey there, fellow code wranglers! Today, we’re going to chat about something that often causes programmers to scratch their heads: Kubernetes limits and requests. Trust me, getting these two concepts straight can save you a hell of a lot of frustration in production. So grab your favorite beverage, kick back, and let’s explore how these bad boys make your life easier when managing Kubernetes resources.</p> <h3 id="what-the-heck-are-limits-and-requests">What the Heck Are Limits and Requests?</h3> <p>Alright, before we jump into the nitty-gritty, let’s quickly define what we mean by limits and requests.</p> <ol> <li> <p><strong>Requests</strong> tell Kubernetes the minimum amount of CPU and memory you need for your application to run. Think of it as the bare minimum to keep things humming along smoothly.</p> </li> <li> <p><strong>Limits</strong>, on the other hand, are like the bouncers at a club. They set a cap on how much CPU and memory your application can use. This is critical if you want to avoid a situation where one resource hog crashes the whole party (read: cluster).</p> </li> </ol> <h3 id="the-many-ways-to-use-limits-and-requests">The Many Ways to Use Limits and Requests</h3> <p>Now, let’s check out how we can use these concepts effectively. Spoiler alert: there are several approaches, and you’ll probably want to experiment with a few to see which fits your needs.</p> <h4 id="1-specifying-resources-in-yaml">1. Specifying Resources in YAML</h4> <p>The most straightforward way to set limits and requests is in your Pod specification (the good old YAML). Let’s say we’ve got a simple app running a web server. Here’s how you could define requests and limits:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">my-web-app</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">containers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">web-server</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">nginx:latest</span>
    <span class="na">resources</span><span class="pi">:</span>
      <span class="na">requests</span><span class="pi">:</span>
        <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">64Mi"</span>
        <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">250m"</span>
      <span class="na">limits</span><span class="pi">:</span>
        <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">128Mi"</span>
        <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">500m"</span>
</code></pre></div></div> <p>In this example, our pod requests 64Mi of memory and 250m (milli) CPU but can use up to 128Mi and 500m when the going gets tough. This is great for maintaining a smooth user experience while still being kind to your Kubernetes cluster.</p> <h4 id="2-default-resource-quotas-for-namespaces">2. Default Resource Quotas for Namespaces</h4> <p>Did you know you could set default limits and requests for an entire namespace? This is a handy trick if you want to enforce consistency across different teams or applications.</p> <p>Here’s how to set up a ResourceQuota:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ResourceQuota</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">my-resource-quota</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">my-namespace</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">hard</span><span class="pi">:</span>
    <span class="na">requests.memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">1Gi"</span>
    <span class="na">requests.cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">1"</span>
    <span class="na">limits.memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">2Gi"</span>
    <span class="na">limits.cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">2"</span>
</code></pre></div></div> <p>With this config, any new pods created in <code class="language-plaintext highlighter-rouge">my-namespace</code> will inherit these limits unless overridden in the Pod spec. It’s like setting parental controls for your resources. You don’t want your kids (ahem, workloads) going nuts!</p> <h4 id="3-vertical-pod-autoscaler-vpa">3. Vertical Pod Autoscaler (VPA)</h4> <p>If you’re looking to automate your resource management, check out the Vertical Pod Autoscaler (VPA). This tool can adjust requests and limits based on actual usage over time.</p> <p>Here’s an example of deploying VPA for our earlier web server:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">autoscaling.k8s.io/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">VerticalPodAutoscaler</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">my-web-app-vpa</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">targetRef</span><span class="pi">:</span>
    <span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
    <span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">my-web-app</span>
  <span class="na">updatePolicy</span><span class="pi">:</span>
    <span class="na">updateMode</span><span class="pi">:</span> <span class="s">Auto</span>
</code></pre></div></div> <p>With VPA in the mix, you won’t need to constantly babysit your workloads. It’ll take care of scaling those resource requests and limits for you—how sweet is that?</p> <h4 id="4-horizontal-pod-autoscaler-hpa">4. Horizontal Pod Autoscaler (HPA)</h4> <p>If you’re dealing with fluctuating traffic, the Horizontal Pod Autoscaler comes to the rescue. Although it’s more about scaling the number of pods rather than limits/requests directly, it’s great to know about.</p> <p>Here’s how you can set it up:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">autoscaling/v2beta2</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">HorizontalPodAutoscaler</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">my-hpa</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">scaleTargetRef</span><span class="pi">:</span>
    <span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
    <span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">my-web-app</span>
  <span class="na">minReplicas</span><span class="pi">:</span> <span class="m">1</span>
  <span class="na">maxReplicas</span><span class="pi">:</span> <span class="m">10</span>
  <span class="na">metrics</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">type</span><span class="pi">:</span> <span class="s">Pods</span>
    <span class="na">pods</span><span class="pi">:</span>
      <span class="na">metric</span><span class="pi">:</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">requests</span>
      <span class="na">target</span><span class="pi">:</span>
        <span class="na">type</span><span class="pi">:</span> <span class="s">AverageValue</span>
        <span class="na">averageValue</span><span class="pi">:</span> <span class="s2">"</span><span class="s">500m"</span>
</code></pre></div></div> <p>With the HPA in action, your deployment can scale from as few as 1 pod to as many as 10 depending on the number of requests. No resource wastage here, just lazy scaling.</p> <h4 id="5-pod-affinity-and-anti-affinity-rules">5. Pod Affinity and Anti-Affinity Rules</h4> <p>Sometimes, you might want to control where your pods land in the cluster. These rules let you specify whether your pod should be co-located with other pods or kept as far away as possible. Not quite limits and requests, but important for resource efficiency!</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">my-affinity-deployment</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">3</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">my-app</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">my-app</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">affinity</span><span class="pi">:</span>
        <span class="na">podAffinity</span><span class="pi">:</span>
          <span class="na">requiredDuringSchedulingIgnoredDuringExecution</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">labelSelector</span><span class="pi">:</span>
              <span class="na">matchExpressions</span><span class="pi">:</span>
              <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span> <span class="s">app</span>
                <span class="na">operator</span><span class="pi">:</span> <span class="s">In</span>
                <span class="na">values</span><span class="pi">:</span>
                <span class="pi">-</span> <span class="s">my-app</span>
            <span class="na">topologyKey</span><span class="pi">:</span> <span class="s2">"</span><span class="s">kubernetes.io/hostname"</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">my-app</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">my-image:latest</span>
</code></pre></div></div> <p>This ensures that your pods with <code class="language-plaintext highlighter-rouge">my-app</code> label are scheduled on the same host, which may be useful for caching reasons or reducing latency.</p> <h3 id="conclusion">Conclusion</h3> <p>Phew! That was a whirlwind tour of Kubernetes limits and requests! Whether you’re putting them in your YAML files, setting up ResourceQuotas, utilizing VPA or HPA, or messing with affinities, I hope you now see how these concepts can help manage resources better and maintain a stable environment.</p> <p>Get ready to say goodbye to resource bottlenecks and hello to seamless scaling. Go forth and optimize with confidence!</p> <p>References:</p> <ul> <li><a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/">Kubernetes Resource Management</a></li> <li><a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/">Kubernetes HPA</a></li> <li><a href="https://github.com/kubernetes/autoscaler/tree/master/vertical-pod-autoscaler">Kubernetes VPA</a></li> </ul>]]></content><author><name></name></author><category term="Kubernetes"/><category term="DevOps"/><category term="containerization"/><category term="resource_management"/><summary type="html"><![CDATA[Dive into the nitty-gritty of Kubernetes limits and requests. This article breaks down the concepts with practical examples, so you can keep your resources in check without losing your mind.]]></summary></entry><entry><title type="html">A Lazy Programmer’s Guide to ConfigMaps in OCP and Kubernetes: The Good, The Bad, and The Configurable</title><link href="https://balasubramanyamlanka.com/a-lazy-programmer's-guide-to-configmaps-in-ocp-and-kubernetes-the-good,-the-bad,-and-the-configurable/" rel="alternate" type="text/html" title="A Lazy Programmer’s Guide to ConfigMaps in OCP and Kubernetes: The Good, The Bad, and The Configurable"/><published>2024-12-02T20:21:40+00:00</published><updated>2024-12-02T20:21:40+00:00</updated><id>https://balasubramanyamlanka.com/a-lazy-programmer&apos;s-guide-to-configmaps-in-ocp-and-kubernetes:-the-good,-the-bad,-and-the-configurable</id><content type="html" xml:base="https://balasubramanyamlanka.com/a-lazy-programmer&apos;s-guide-to-configmaps-in-ocp-and-kubernetes-the-good,-the-bad,-and-the-configurable/"><![CDATA[<p>Alright, fellow code wranglers! Today, I’m diving into one of those magical things that makes configuring your applications in Kubernetes and OpenShift so much easier—ConfigMaps. Sounds fancy, right? But what are they, and why should you give a damn? Let’s break it down, with a sprinkle of humor and some code to keep things spicy.</p> <h3 id="what-the-heck-is-a-configmap">What the Heck is a ConfigMap?</h3> <p>In plain English, a ConfigMap is a Kubernetes object that lets you separate your configuration data from your application code. This means you can change the configuration without having to recompile or redeploy your app, which is pretty sweet. Whether you’re working in Kubernetes or OpenShift (which is basically Kubernetes on steroids), ConfigMaps are your go-to for managing non-sensitive configuration data.</p> <h3 id="why-should-you-even-use-configmaps">Why Should You Even Use ConfigMaps?</h3> <p><strong>Pros</strong>:</p> <ol> <li><strong>Decoupling Config from App Code</strong>: This is like the biggest plus. Your app becomes more flexible and easier to manage.</li> <li><strong>Easy Updates</strong>: Change configs on-the-fly without redeploying your app. It’s like changing clothes without taking a shower.</li> <li><strong>Reusability</strong>: You can use the same ConfigMap across multiple deployments. It’s like having that one cool shirt you can wear to any party.</li> <li><strong>Version Control</strong>: You can use ConfigMaps in conjunction with GitOps practices for better version control.</li> </ol> <p><strong>Cons</strong>:</p> <ol> <li><strong>Complexity</strong>: Sure, they love to tout decoupling, but adding another layer of abstraction can get messy.</li> <li><strong>Memory Overhead</strong>: If you are storing large amounts of data, this can add some bloat and cost—so don’t overdo it like that extra cheese on your pizza.</li> <li><strong>Limitations for Sensitive Data</strong>: ConfigMaps aren’t meant for sensitive info like passwords or secrets. That’s what Secrets are for.</li> </ol> <h3 id="possible-setups-for-configmaps">Possible Setups for ConfigMaps</h3> <h4 id="1-basic-configmap-creation">1. Basic ConfigMap Creation</h4> <p>Creating a ConfigMap is as simple as saying “abracadabra.” You can create it from a literal value, a file, or even from environment variables.</p> <p><strong>Creating from a Literal Value:</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl create configmap my-config <span class="nt">--from-literal</span><span class="o">=</span><span class="nv">key1</span><span class="o">=</span>value1 <span class="nt">--from-literal</span><span class="o">=</span><span class="nv">key2</span><span class="o">=</span>value2
</code></pre></div></div> <p><strong>Creating from a File:</strong></p> <p>Imagine you have a <code class="language-plaintext highlighter-rouge">config.txt</code> file with your key-value pairs.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl create configmap my-config <span class="nt">--from-file</span><span class="o">=</span>config.txt
</code></pre></div></div> <p><strong>Creating from Environment Variables:</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl create configmap my-env-config <span class="nt">--from-env-file</span><span class="o">=</span>env.list
</code></pre></div></div> <h4 id="2-using-configmap-in-pods">2. Using ConfigMap in Pods</h4> <p>Perfect, you’ve created a ConfigMap—now how do you use it? There are a few ways to do this in your Pods: using environment variables or mounting the ConfigMap as a volume.</p> <p><strong>Using as Environment Variables:</strong></p> <p>Here’s a simple deployment YAML that pulls in the ConfigMap values:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">my-app</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">2</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">my-app</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">my-app</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">my-container</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">my-image:latest</span>
        <span class="na">env</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">KEY1</span>
          <span class="na">valueFrom</span><span class="pi">:</span>
            <span class="na">configMapKeyRef</span><span class="pi">:</span>
              <span class="na">name</span><span class="pi">:</span> <span class="s">my-config</span>
              <span class="na">key</span><span class="pi">:</span> <span class="s">key1</span>
</code></pre></div></div> <p><strong>Mounting as a Volume:</strong></p> <p>If you want to mount the ConfigMap into your file system, you can do it like this:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">my-app</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">2</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">my-app</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">my-app</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">my-container</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">my-image:latest</span>
        <span class="na">volumeMounts</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">config-volume</span>
          <span class="na">mountPath</span><span class="pi">:</span> <span class="s">/etc/config</span>
      <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">config-volume</span>
        <span class="na">configMap</span><span class="pi">:</span>
          <span class="na">name</span><span class="pi">:</span> <span class="s">my-config</span>
</code></pre></div></div> <h3 id="3-updating-a-configmap">3. Updating a ConfigMap</h3> <p>Updating is where it gets fun. You can edit a ConfigMap with a simple command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl edit configmap my-config
</code></pre></div></div> <p>Run that bad boy, make your changes, and boom—your deployment will automatically pick up the new config (as long as you’re on a rolling update!).</p> <p>However, keep in mind that if you change the ConfigMap, you’ll still need to restart your Pods to see changes reflected. No magic here, folks.</p> <h3 id="conclusion">Conclusion</h3> <p>So that’s the lowdown on ConfigMaps in Kubernetes and OpenShift. They can simplify your life, making your application more flexible, but they can also complicate things if you’re not careful. There’s a balance, as with all things in life—or at least your code deployment pipeline.</p> <p>Just remember, though, ConfigMaps are great for configuration management, but don’t get lazy and try to put everything in them—keep some data in Secrets for that sensitive stuff, and don’t forget to manage your ConfigMaps like the precious gems they are!</p> <h3 id="references">References</h3> <ul> <li><a href="https://kubernetes.io/docs/concepts/configuration/configmap/">Kubernetes Official ConfigMap Documentation</a></li> <li><a href="https://docs.openshift.com/container-platform/latest/nodes/pods-nodes.html#configmap-overview">OpenShift ConfigMap Documentation</a></li> <li><a href="https://kubernetes.io/docs/concepts/configuration/overview/#manifests-and-yaml">Kubernetes YAML Basics</a></li> </ul>]]></content><author><name></name></author><category term="Kubernetes"/><category term="DevOps"/><category term="ConfigMaps"/><category term="OCP"/><summary type="html"><![CDATA[Dive into the world of ConfigMaps in OpenShift and Kubernetes with this laid-back guide that weighs the pros and cons and explores various setups with easy-to-digest code snippets.]]></summary></entry></feed>