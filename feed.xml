<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://balasubramanyamlanka.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://balasubramanyamlanka.com/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-12-07T02:36:06+00:00</updated><id>https://balasubramanyamlanka.com/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html"></title><link href="https://balasubramanyamlanka.com/2024-12-05-leetcode-485-finding-max-consecutive-ones-my-daily-struggle/" rel="alternate" type="text/html" title=""/><published>2024-12-07T02:36:06+00:00</published><updated>2024-12-07T02:36:06+00:00</updated><id>https://balasubramanyamlanka.com/2024-12-05-leetcode-485---finding-max-consecutive-ones:-my-daily-struggle</id><content type="html" xml:base="https://balasubramanyamlanka.com/2024-12-05-leetcode-485-finding-max-consecutive-ones-my-daily-struggle/"><![CDATA[<hr/> <h3 id="the-problem">The Problem</h3> <p>The problem asks us to find the maximum number of consecutive 1s in a binary array. You know, like if you have something like this:</p> <p><code class="language-plaintext highlighter-rouge">[1, 1, 0, 1, 1, 1]</code></p> <p>The maximum consecutive ones here is 3, right? Simple enough, that’s how we roll.</p> <p>So, here’s the actual problem statement from LeetCode:</p> <p><em>Given a binary array <code class="language-plaintext highlighter-rouge">nums</code>, return the maximum number of consecutive <code class="language-plaintext highlighter-rouge">1</code>s in the array.</em></p> <h3 id="my-solution">My Solution</h3> <p>Here’s a straightforward solution I came up with while deep in the zone (you know what I mean). I’ve written it in Java, but if you’re a Python aficionado or something else, you’ll get the gist!</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">findMaxConsecutiveOnes</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">fc</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>  <span class="c1">// This is for the final count</span>
        <span class="kt">int</span> <span class="n">lc</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>  <span class="c1">// This is for the current count</span>
        
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">lc</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// If it's a zero, reset the current count</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">lc</span><span class="o">++;</span> <span class="c1">// Otherwise, just increment the current count</span>
            <span class="o">}</span>
            <span class="n">fc</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">lc</span><span class="o">,</span> <span class="n">fc</span><span class="o">);</span> <span class="c1">// Update max count</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">fc</span><span class="o">;</span> <span class="c1">// Return the max consecutive ones</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <h3 id="complexity-analysis">Complexity Analysis</h3> <p>Let’s break down the complexity a bit because that’s always a fun part, right?</p> <ul> <li><strong>Time Complexity:</strong> O(n), where n is the length of the array. We only loop through the array once, so it’s pretty efficient.</li> <li><strong>Space Complexity:</strong> O(1), since we’re using just a couple of extra variables and not any additional data structures.</li> </ul> <h3 id="conclusion">Conclusion</h3> <p>And there you have it, folks! My very own solution to LeetCode problem 485. It’s clean, it’s neat, and hell, it works! Each time I solve one of these LeetCode problems, I feel like I’ve leveled up my coding skills, even if just a smidge. It’ll certainly make my day job a bit easier, I hope!</p> <p>If you want to dive deeper or see examples of more coding problems, check out the following references:</p> <ul> <li><a href="https://leetcode.com/problems/max-consecutive-ones/">LeetCode Problem 485</a></li> <li><a href="https://www.geeksforgeeks.org/window-sliding-technique/">Good Article on Sliding Window Techniques</a></li> </ul>]]></content><author><name></name></author></entry><entry><title type="html">Quick Cheatsheet: Remove New Lines and Empty Lines in Linux</title><link href="https://balasubramanyamlanka.com/quick-cheatsheet-remove-new-lines-and-empty-lines-in-linux-like-a-boss/" rel="alternate" type="text/html" title="Quick Cheatsheet: Remove New Lines and Empty Lines in Linux"/><published>2024-12-06T12:30:27+00:00</published><updated>2024-12-06T12:30:27+00:00</updated><id>https://balasubramanyamlanka.com/quick-cheatsheet:-remove-new-lines-and-empty-lines-in-linux-like-a-boss</id><content type="html" xml:base="https://balasubramanyamlanka.com/quick-cheatsheet-remove-new-lines-and-empty-lines-in-linux-like-a-boss/"><![CDATA[<hr/> <p>You know how sometimes you’re knee-deep in some file, and it’s just cluttered with new lines or annoying empty lines? Yeah, that’s the kind of crap that can drive you mad. Don’t you wish there was an easy way to wipe that all away? Well, I’ve got your back. Get ready to transform your files into neat little packages with just a few commands.</p> <h3 id="removing-new-lines">Removing New Lines</h3> <p>First off, let’s tackle those pesky new lines. Sometimes, you end up with new lines all over the place, messing up your formatting. Here’s a quick command you can run to sweep them away.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Use this command to remove all new lines</span>
<span class="nb">tr</span> <span class="nt">-d</span> <span class="s1">'\n'</span> &lt; input.txt <span class="o">&gt;</span> output.txt
</code></pre></div></div> <p>This little gem uses <code class="language-plaintext highlighter-rouge">tr</code> (translate or delete characters). It takes our beloved input file, targets new lines with <code class="language-plaintext highlighter-rouge">-d '\n'</code>, and outputs a cleaned-up version in <code class="language-plaintext highlighter-rouge">output.txt</code>. Pretty cool, right?</p> <p>But if you only want to remove <strong>trailing</strong> new lines rather than every single one, you can use <code class="language-plaintext highlighter-rouge">sed</code> like this:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># To trim trailing new lines only</span>
<span class="nb">sed</span> <span class="s1">'/^$/d'</span> input.txt <span class="o">&gt;</span> output.txt
</code></pre></div></div> <p>This one-liner gets rid of empty lines. The <code class="language-plaintext highlighter-rouge">^$</code> regex matches any lines that start and end with nothing (a.k.a. empty lines). The <code class="language-plaintext highlighter-rouge">d</code> command deletes those lines.</p> <h3 id="removing-empty-new-lines">Removing Empty New Lines</h3> <p>Okay, now let’s get to that annoying issue of empty new lines, which just clutter up your file without adding any value. Here’s another handy command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Removing consecutive empty lines</span>
<span class="nb">sed</span> <span class="s1">'/^$/N;/^\n$/D'</span> input.txt <span class="o">&gt;</span> output.txt
</code></pre></div></div> <p>This one uses <code class="language-plaintext highlighter-rouge">sed</code> again, and is a bit of a magic trick. What happens here is we look for empty lines and merge them (<code class="language-plaintext highlighter-rouge">N</code>) with the next line, then delete (<code class="language-plaintext highlighter-rouge">D</code>) if both are empty. Result? You get a file that’s compact and clean!</p> <h3 id="additional-hacks">Additional Hacks</h3> <p>You might want to ensure that there are <em>no</em> empty lines either at the start or the end of your file. Here’s a two-in-one command to handle that:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Primary command to remove empty lines throughout the file and trim the ends</span>
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'/^$/d; /^$/N; /^\n$/D'</span> input.txt
</code></pre></div></div> <p>This <code class="language-plaintext highlighter-rouge">-i</code> option edits files in place. Yup, there’s no output redirection here—your original file gets the treatment and comes out sparkling clean.</p> <h3 id="not-just-text-files">Not Just Text Files!</h3> <p>You don’t just have to limit this to text files, either! If you’re working with other types of files, sometimes using <code class="language-plaintext highlighter-rouge">tr</code> or <code class="language-plaintext highlighter-rouge">sed</code> can help with quick and dirty edits without needing to open a GUI editor. Just be cautious, ‘cause you could mess something up if you’re not careful.</p> <h3 id="conclusion">Conclusion</h3> <p>So there you have it, folks! A quick cheatsheet to help you out when lines get out of hand. You no longer have to deal with end-of-the-world scenarios caused by messy files. Your code will thank you, and you can keep your sanity intact whilst making your files readable again.</p> <h3 id="references">References</h3> <ul> <li><a href="https://www.gnu.org/software/coreutils/manual/html_node/tr.html">GNU <code class="language-plaintext highlighter-rouge">tr</code></a></li> <li><a href="https://www.gnu.org/software/sed/manual/sed.html">GNU <code class="language-plaintext highlighter-rouge">sed</code></a></li> </ul>]]></content><author><name></name></author><category term="Linux"/><category term="Programming"/><category term="Command Line"/><category term="Productivity"/><summary type="html"><![CDATA[This article breaks down some quick commands to tidy up files in Linux by removing unwanted new lines and those pesky empty lines. Keep your files clean and readable without breaking a sweat!]]></summary></entry><entry><title type="html">Is Bitwise &amp;amp; Better than Arithmetic to Determine Even or Odd? Let’s Dive In!</title><link href="https://balasubramanyamlanka.com/is-bitwise-&-better-than-arithmetic-to-determine-even-or-odd-let-s-dive-in!/" rel="alternate" type="text/html" title="Is Bitwise &amp;amp; Better than Arithmetic to Determine Even or Odd? Let’s Dive In!"/><published>2024-12-05T23:40:29+00:00</published><updated>2024-12-05T23:40:29+00:00</updated><id>https://balasubramanyamlanka.com/is-bitwise-&amp;-better-than-arithmetic-to-determine-even-or-odd?-let%E2%80%99s-dive-in!</id><content type="html" xml:base="https://balasubramanyamlanka.com/is-bitwise-&amp;-better-than-arithmetic-to-determine-even-or-odd-let-s-dive-in!/"><![CDATA[<hr/> <p>Hey there, fellow code wranglers! Today’s topic is a fun and slightly nerdy one. It’s about finding out if a number is even or odd using two different methods: the classic arithmetic method and the bitwise operation. Buckle up, because we’re about to venture into the depths of zeros and ones, and I might throw in a few cheeky comments along the way!</p> <h3 id="the-classic-arithmetic-check">The Classic Arithmetic Check</h3> <p>First up, let’s talk about the good ol’ arithmetic method. You know it well: we simply take a number and check if it’s divisible by 2.</p> <p>Here’s how it looks in code:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">is_even_arithmetic</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">is_even_arithmetic</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span>  <span class="c1"># True
</span><span class="nf">print</span><span class="p">(</span><span class="nf">is_even_arithmetic</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>  <span class="c1"># False
</span></code></pre></div></div> <p>This works like a charm! You just use the modulus operator <code class="language-plaintext highlighter-rouge">%</code>, and boom, you can tell in a heartbeat if a number is even. The problem? Dividing by 2 can be a smidge slow. In programming, every tiny nanosecond counts, especially when you wanna squeeze those last few drops of performance out of your app.</p> <h3 id="the-bitwise-operation-magic">The Bitwise Operation Magic</h3> <p>Now let’s pivot to the bitwise operation. Instead of playing with division, we’re gonna go low-level and use bit manipulation. In programming, specifically in languages like C, C++, or even Python, checking if a number is even can be done like this:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">is_even_bitwise</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
    <span class="nf">return </span><span class="p">(</span><span class="n">num</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">is_even_bitwise</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span>  <span class="c1"># True
</span><span class="nf">print</span><span class="p">(</span><span class="nf">is_even_bitwise</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>  <span class="c1"># False
</span></code></pre></div></div> <p>Bam! What happens here is that we’re using the <code class="language-plaintext highlighter-rouge">&amp;</code> operator to perform a bitwise AND operation. When you perform <code class="language-plaintext highlighter-rouge">num &amp; 1</code>, it checks the least significant bit of the number. If it’s a 0, the number is even; if it’s a 1, it’s odd. Simple and super fast!</p> <h3 id="why-is-bitwise-better">Why is Bitwise Better?</h3> <p>You might be wondering, “Why the hell would I use bitwise over arithmetic?” Well, my friend, here’s the catch!</p> <ol> <li> <p><strong>Performance</strong>: Bitwise operations are generally faster than arithmetic operations. This is because bitwise operations are performed at the hardware level, and processors are built to handle these like a boss. In a world where you can have millions of calculations (hello, algorithms!), this can make a considerable difference!</p> </li> <li> <p><strong>Memory Efficiency</strong>: Bitwise checks can also be cheaper in terms of memory, especially in lower-level programming where every byte counts.</p> </li> </ol> <h3 id="real-world-example">Real World Example</h3> <p>Let’s throw some practical scenarios into the mix. Say you’re working on a high-performance application that crunches large datasets or performs a ton of calculations in real-time, such as game development, data science, or AI algorithms.</p> <p>That’s when you notice that using a bitwise operation can shave off those precious milliseconds from each operation. When this operation is performed millions of times in a loop, it compounds, bringing tangible benefits. Here’s an example of a loop:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">count_evens</span><span class="p">(</span><span class="n">numbers</span><span class="p">):</span>
    <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">:</span>
        <span class="k">if</span> <span class="nf">is_even_bitwise</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
            <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">count</span>

<span class="n">large_dataset</span> <span class="o">=</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1000001</span><span class="p">)</span>  <span class="c1"># A million numbers
</span><span class="nf">print</span><span class="p">(</span><span class="nf">count_evens</span><span class="p">(</span><span class="n">large_dataset</span><span class="p">))</span>
</code></pre></div></div> <p>This will run faster using the bitwise method, and in scenarios where every microsecond counts, we nerds appreciate that!</p> <h3 id="conclusion">Conclusion</h3> <p>So, here’s the lowdown: When it comes to determining if a number is even or odd, the bitwise operation is not just a flashy trick. It’s a legitimate performance improvement in certain cases. If you’re writing code where performance matters, then using <code class="language-plaintext highlighter-rouge">num &amp; 1</code> can give you those tiny yet impactful boosts.</p> <p>Now go out there and make those decisions that count—both in coding and in life (and please, don’t forget to keep those brackets tidy!).</p> <h3 id="references">References</h3> <ul> <li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators">Bitwise Operators - MDN Web Docs</a></li> <li><a href="https://www.geeksforgeeks.org/bitwise-operators-in-c-cpp/">Understanding Bitwise Operators - GeeksforGeeks</a></li> </ul>]]></content><author><name></name></author><category term="Programming"/><category term="Optimization"/><category term="Bitwise Operations"/><category term="Performance"/><summary type="html"><![CDATA[This blog post explores whether using bitwise operations is superior to arithmetic checks for determining if a number is even or odd, and uncovers the reason behind it.]]></summary></entry><entry><title type="html">LeetCode 1295: Find Numbers with Even Number of Digits</title><link href="https://balasubramanyamlanka.com/leetcode-1295-find-numbers-with-even-number-of-digits/" rel="alternate" type="text/html" title="LeetCode 1295: Find Numbers with Even Number of Digits"/><published>2024-12-05T23:38:31+00:00</published><updated>2024-12-05T23:38:31+00:00</updated><id>https://balasubramanyamlanka.com/leetcode-1295:-find-numbers-with-even-number-of-digits</id><content type="html" xml:base="https://balasubramanyamlanka.com/leetcode-1295-find-numbers-with-even-number-of-digits/"><![CDATA[<hr/> <p>So, I’ve been diving into LeetCode problems day in and day out, and today I’m going to share a neat little solution for LeetCode question 1295: <em>Find Numbers with Even Number of Digits</em>. You know how it goes - some days you just churn out code while other days you stare at the screen like a total idiot. But hey, let’s crack on with it!</p> <h3 id="the-problem">The Problem</h3> <p>The problem is pretty straightforward, and honestly, it’s one of those you can solve while enjoying your coffee. The goal is to find how many numbers in a given array have an even number of digits.</p> <p>So, here’s the deal:</p> <ul> <li>You’re given an integer array <code class="language-plaintext highlighter-rouge">nums</code>, and you have to return the count of numbers that have an even number of digits.</li> </ul> <h3 id="my-solution">My Solution</h3> <p>Here’s the Java solution I whipped up. You can think of it as a classic counting problem, but we’re counting digits instead of things that matter—like pizza toppings or how many bugs we have to fix.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">findNumbers</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// Initialize a counter to track numbers with even digits</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">digits</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// Variable to count the number of digits in the current number</span>
            <span class="c1">// Special handling for zero since it doesn't enter the loop</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">num</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">digits</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">num</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// This loop counts the digits</span>
                <span class="n">num</span> <span class="o">=</span> <span class="n">num</span> <span class="o">/</span> <span class="mi">10</span><span class="o">;</span> <span class="c1">// Divide by 10 to drop the last digit</span>
                <span class="n">digits</span><span class="o">++;</span> <span class="c1">// Increment digit count</span>
            <span class="o">}</span>
            <span class="k">if</span> <span class="o">((</span><span class="n">digits</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// Check if digits are even using bitwise AND</span>
                <span class="n">counter</span><span class="o">++;</span> <span class="c1">// Increment counter if we have an even digit number</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">counter</span><span class="o">;</span> <span class="c1">// Return the total count of even digit numbers</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <h3 id="complexity-analysis">Complexity Analysis</h3> <p>Now let’s talk complexity, because, you know, that’s the good stuff.</p> <ul> <li> <p><strong>Time Complexity</strong>: O(N * D), where N is the number of elements in the <code class="language-plaintext highlighter-rouge">nums</code> array and D is the average number of digits in a number. This is because we potentially examine each digit in every number.</p> </li> <li> <p><strong>Space Complexity</strong>: O(1) since we only use a fixed amount of space regardless of input size. Just a couple of integers to keep track of our counts.</p> </li> </ul> <h3 id="references">References</h3> <ul> <li><a href="https://leetcode.com/problems/find-numbers-with-even-number-of-digits/">LeetCode Problem 1295</a></li> <li><a href="https://en.wikipedia.org/wiki/Bit_manipulation">Bit Manipulation</a></li> </ul>]]></content><author><name></name></author><category term="Programming"/><category term="Algorithms"/><category term="LeetCode"/><category term="Java"/><summary type="html"><![CDATA[In this post, I’m sharing my solution to LeetCode question 1295. Join me as I explore how to find numbers with an even number of digits in a simple and straightforward way!]]></summary></entry><entry><title type="html">LeetCode 977: Squares of a Sorted Array Solution</title><link href="https://balasubramanyamlanka.com/leetcode-977-squares-of-a-sorted-array-solution/" rel="alternate" type="text/html" title="LeetCode 977: Squares of a Sorted Array Solution"/><published>2024-12-05T23:38:12+00:00</published><updated>2024-12-05T23:38:12+00:00</updated><id>https://balasubramanyamlanka.com/leetcode-977:-squares-of-a-sorted-array-solution</id><content type="html" xml:base="https://balasubramanyamlanka.com/leetcode-977-squares-of-a-sorted-array-solution/"><![CDATA[<hr/> <p>Let’s tackle LeetCode 977: Squares of a Sorted Array. Yeah, if you’ve spent any time on LeetCode, you know where we’re headed with this one. It’s all about taking a sorted array of integers, squaring them, and returning them in the same sorted order. Sounds simple, right? Well, there’s always a twist with these problems.</p> <h2 id="problem-statement">Problem Statement</h2> <p>Given an integer array <code class="language-plaintext highlighter-rouge">nums</code> sorted in non-decreasing order, return an array of the squares of each number, also in non-decreasing order.</p> <h3 id="example">Example</h3> <ul> <li>Input: <code class="language-plaintext highlighter-rouge">nums = [-4,-1,0,3,10]</code></li> <li>Output: <code class="language-plaintext highlighter-rouge">[0, 1, 9, 16, 100]</code></li> </ul> <h2 id="my-solution">My Solution</h2> <p>Here’s the Java code I cooked up for this problem:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">sortedSquares</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">result</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">square</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">])</span> <span class="o">&gt;</span> <span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">]))</span> <span class="o">{</span>
                <span class="n">square</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">];</span>
                <span class="n">left</span><span class="o">++;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">square</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">];</span>
                <span class="n">right</span><span class="o">--;</span>
            <span class="o">}</span>
            <span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">square</span> <span class="o">*</span> <span class="n">square</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <h2 id="complexity-analysis">Complexity Analysis</h2> <ul> <li><strong>Time Complexity</strong>: O(n) — We are only making a single pass through the array.</li> <li><strong>Space Complexity</strong>: O(n) — We are using a new array to hold the results.</li> </ul> <h2 id="conclusion">Conclusion</h2> <p>And there you have it! By using a two-pointer technique, we’ve managed to solve this problem in linear time. It’s efficient, neat, and gets the job done without breaking a sweat. Now, all that’s left is to keep grinding those LeetCode problems. If you enjoyed this breakdown or have any questions, feel free to drop a comment!</p> <h2 id="references">References</h2> <ul> <li><a href="https://leetcode.com/problems/squares-of-a-sorted-array/">LeetCode Problem 977 - Squares of a Sorted Array</a></li> <li><a href="https://www.geeksforgeeks.org/two-pointers-technique/">Two Pointers Technique Explained</a></li> </ul> <p>Happy coding! 🖖</p>]]></content><author><name></name></author><category term="LeetCode"/><category term="Programming Challenges"/><category term="Coding"/><category term="Algorithms"/><summary type="html"><![CDATA[In this post, I'm sharing my solution for LeetCode problem 977 - Squares of a Sorted Array. Let's dive into some coding magic and tackle problem-solving head-on!]]></summary></entry><entry><title type="html">LeetCode Question 383: Ransom Note Solution Breakdown</title><link href="https://balasubramanyamlanka.com/leetcode-question-383-ransom-note-solution-breakdown/" rel="alternate" type="text/html" title="LeetCode Question 383: Ransom Note Solution Breakdown"/><published>2024-12-05T00:43:10+00:00</published><updated>2024-12-05T00:43:10+00:00</updated><id>https://balasubramanyamlanka.com/leetcode-question-383:-ransom-note-solution-breakdown</id><content type="html" xml:base="https://balasubramanyamlanka.com/leetcode-question-383-ransom-note-solution-breakdown/"><![CDATA[<hr/> <h3 id="problem-statement">Problem Statement</h3> <p>The problem states:</p> <p>Given two strings <code class="language-plaintext highlighter-rouge">ransomNote</code> and <code class="language-plaintext highlighter-rouge">magazine</code>, return <code class="language-plaintext highlighter-rouge">true</code> if you can construct the <code class="language-plaintext highlighter-rouge">ransomNote</code> from the <code class="language-plaintext highlighter-rouge">magazine</code> and <code class="language-plaintext highlighter-rouge">false</code> otherwise.</p> <p>Each letter in the <code class="language-plaintext highlighter-rouge">magazine</code> can only be used once in the <code class="language-plaintext highlighter-rouge">ransomNote</code>.</p> <p>So, if you’re wondering whether you have enough letters in the magazine to create a ransom note, this is the problem that will help you check!</p> <h3 id="my-solution">My Solution</h3> <p>After scratching my head for a bit (and sipping on some of that sweet, sweet coffee), I came up with a solution in Java. Here’s the code I submitted:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">canConstruct</span><span class="o">(</span><span class="nc">String</span> <span class="n">ransomNote</span><span class="o">,</span> <span class="nc">String</span> <span class="n">magazine</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">magazineLetter</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>

        <span class="c1">// Count each letter's occurrences in the magazine</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">magazine</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">char</span> <span class="n">m</span> <span class="o">=</span> <span class="n">magazine</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="kt">int</span> <span class="n">currentCount</span> <span class="o">=</span> <span class="n">magazineLetter</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">m</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
            <span class="n">magazineLetter</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">m</span><span class="o">,</span> <span class="n">currentCount</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">// Check each letter in the ransom note</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ransomNote</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">char</span> <span class="n">r</span> <span class="o">=</span> <span class="n">ransomNote</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="kt">int</span> <span class="n">currentCount</span> <span class="o">=</span> <span class="n">magazineLetter</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">r</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">currentCount</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span> <span class="c1">// Not enough letters</span>
            <span class="o">}</span>
            <span class="n">magazineLetter</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">r</span><span class="o">,</span> <span class="n">currentCount</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span> <span class="c1">// Use one letter</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span> <span class="c1">// Successfully constructed the ransom note</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <h3 id="complexity-analysis">Complexity Analysis</h3> <ul> <li> <p><strong>Time Complexity:</strong> O(m + n), where m is the length of the <code class="language-plaintext highlighter-rouge">magazine</code> and n is the length of the <code class="language-plaintext highlighter-rouge">ransomNote</code>. We traverse both strings linearly, so this is pretty efficient.</p> </li> <li> <p><strong>Space Complexity:</strong> O(1) in terms of the character set size, since we’re only using a fixed-size <code class="language-plaintext highlighter-rouge">HashMap</code> for the alphabet (assuming we’re only dealing with standard English letters).</p> </li> </ul> <p>So yeah, overall it’s a pretty neat and efficient solution!</p> <h3 id="conclusion">Conclusion</h3> <p>And there you have it, folks. I just walked you through my thought process and solution for LeetCode problem 383. If you’re diving into the world of algorithms and data structures, it’s super important to keep practicing, and I’m here to document my grind.</p> <p>Feel free to hit me up with your own solutions or questions in the comments. Let’s keep this programming journey rolling!</p> <h3 id="references">References</h3> <ul> <li><a href="https://leetcode.com/problems/ransom-note/">LeetCode Problem 383</a></li> </ul>]]></content><author><name></name></author><category term="LeetCode"/><category term="Programming Challenges"/><category term="Java"/><category term="Algorithms"/><summary type="html"><![CDATA[In this post, I'll walk you through my daily grind of solving LeetCode problems, focusing on problem 383: Ransom Note. Get ready for some code!]]></summary></entry><entry><title type="html">Solving LeetCode Problem 876: Middle of the Linked List</title><link href="https://balasubramanyamlanka.com/solving-leetcode-problem-876-middle-of-the-linked-list/" rel="alternate" type="text/html" title="Solving LeetCode Problem 876: Middle of the Linked List"/><published>2024-12-05T00:42:06+00:00</published><updated>2024-12-05T00:42:06+00:00</updated><id>https://balasubramanyamlanka.com/solving-leetcode-problem-876:-middle-of-the-linked-list</id><content type="html" xml:base="https://balasubramanyamlanka.com/solving-leetcode-problem-876-middle-of-the-linked-list/"><![CDATA[<h3 id="the-question">The Question</h3> <p>The problem states:</p> <blockquote> <p>Given the head of a singly linked list, return the middle node of the linked list. If there are two middle nodes, return the second middle node.</p> </blockquote> <p>So, if you have a linked list like this:<br/> 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5<br/> Your answer should be the node with value 3 since it’s the middle. But if you had 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6, you should return the node with value 4 because there’s a tie!</p> <h3 id="my-solution">My Solution</h3> <p>Alright, let’s get to the juicy part—here’s how I solved this problem. The classic approach here uses a two-pointer technique: a slow pointer and a fast pointer. The fast pointer moves twice as fast as the slow one. When the fast pointer reaches the end of the list, the slow pointer will be at the middle. Here’s the code:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/** 
 * Definition for singly-linked list. 
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ListNode</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">val</span><span class="o">;</span>
    <span class="nc">ListNode</span> <span class="n">next</span><span class="o">;</span>
    <span class="nc">ListNode</span><span class="o">()</span> <span class="o">{}</span>
    <span class="nc">ListNode</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">val</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nc">ListNode</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">,</span> <span class="nc">ListNode</span> <span class="n">next</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">val</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">ListNode</span> <span class="nf">middleNode</span><span class="o">(</span><span class="nc">ListNode</span> <span class="n">head</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ListNode</span> <span class="n">slowPointer</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
        <span class="nc">ListNode</span> <span class="n">fastPointer</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
        
        <span class="c1">// Move fast pointer 2 nodes and slow pointer 1 node at a time</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">fastPointer</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">fastPointer</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">fastPointer</span> <span class="o">=</span> <span class="n">fastPointer</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
            <span class="n">slowPointer</span> <span class="o">=</span> <span class="n">slowPointer</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">slowPointer</span><span class="o">;</span> <span class="c1">// When fastPointer reaches the end, slowPointer is at the middle</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <h3 id="complexity-analysis">Complexity Analysis</h3> <p>Now, let’s break down the complexities, shall we?</p> <ul> <li><strong>Time Complexity</strong>: O(n) – We need to traverse the list just once to find the middle node. Simple enough, right?</li> <li><strong>Space Complexity</strong>: O(1) – We’re not using any extra space here apart from a couple of pointers, which is pretty damn efficient.</li> </ul> <p>References:</p> <ul> <li><a href="https://leetcode.com/problems/middle-of-the-linked-list/">LeetCode Problem 876</a></li> <li><a href="https://www.geeksforgeeks.org/two-pointer-technique/">Two-pointer Technique Overview</a></li> </ul> <p>Catch you later! Happy coding!</p>]]></content><author><name></name></author><category term="LeetCode"/><category term="Algorithms"/><category term="Linked List"/><category term="Coding Problems"/><summary type="html"><![CDATA[In this article, I'm diving into LeetCode Problem 876, where I'll walk you through my solution to finding the middle of a linked list. Strap in for some laid-back coding insights!]]></summary></entry><entry><title type="html">LeetCode Question 1342: Number of Steps to Reduce a Number to Zero - My Simple Solution</title><link href="https://balasubramanyamlanka.com/leetcode-question-1342-number-of-steps-to-reduce-a-number-to-zero-my-simple-solution/" rel="alternate" type="text/html" title="LeetCode Question 1342: Number of Steps to Reduce a Number to Zero - My Simple Solution"/><published>2024-12-05T00:38:44+00:00</published><updated>2024-12-05T00:38:44+00:00</updated><id>https://balasubramanyamlanka.com/leetcode-question-1342:-number-of-steps-to-reduce-a-number-to-zero---my-simple-solution</id><content type="html" xml:base="https://balasubramanyamlanka.com/leetcode-question-1342-number-of-steps-to-reduce-a-number-to-zero-my-simple-solution/"><![CDATA[<p>Let’s kick things off with the problem statement. The challenge is to find out how many steps it takes to reduce a number to zero, where the steps are defined as follows:</p> <ul> <li>If the number is even, divide it by 2.</li> <li>If it’s odd, subtract 1 from it.</li> </ul> <p>Sounds straightforward, right? Like, how hard can it be to reduce an integer to zero with just those two operations? Well, let’s throw some Java code into the mix to show you how it’s done!</p> <h3 id="my-java-solution">My Java Solution</h3> <p>Here’s the code I came up with:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">numberOfSteps</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// This will count our steps</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">num</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">i</span><span class="o">++;</span> <span class="c1">// Increment step count</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">num</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">num</span> <span class="o">=</span> <span class="n">num</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span> <span class="c1">// Even, so divide</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">num</span> <span class="o">=</span> <span class="n">num</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// Odd, so subtract</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">i</span><span class="o">;</span> <span class="c1">// Return total steps taken</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <h3 id="a-quick-example">A Quick Example</h3> <p>Let’s see this in action with an example.</p> <p>Say the input is <code class="language-plaintext highlighter-rouge">num = 14</code>. Here’s how the steps would play out:</p> <ul> <li>Start with <code class="language-plaintext highlighter-rouge">14</code> (even) → divide by <code class="language-plaintext highlighter-rouge">2</code> → <code class="language-plaintext highlighter-rouge">7</code></li> <li><code class="language-plaintext highlighter-rouge">7</code> (odd) → subtract <code class="language-plaintext highlighter-rouge">1</code> → <code class="language-plaintext highlighter-rouge">6</code></li> <li><code class="language-plaintext highlighter-rouge">6</code> (even) → divide by <code class="language-plaintext highlighter-rouge">2</code> → <code class="language-plaintext highlighter-rouge">3</code></li> <li><code class="language-plaintext highlighter-rouge">3</code> (odd) → subtract <code class="language-plaintext highlighter-rouge">1</code> → <code class="language-plaintext highlighter-rouge">2</code></li> <li><code class="language-plaintext highlighter-rouge">2</code> (even) → divide by <code class="language-plaintext highlighter-rouge">2</code> → <code class="language-plaintext highlighter-rouge">1</code></li> <li><code class="language-plaintext highlighter-rouge">1</code> (odd) → subtract <code class="language-plaintext highlighter-rouge">1</code> → <code class="language-plaintext highlighter-rouge">0</code></li> </ul> <p>So, the total steps would be <code class="language-plaintext highlighter-rouge">6</code>.</p> <h3 id="performance-and-complexity">Performance and Complexity</h3> <p>In terms of performance:</p> <ul> <li><strong>Time Complexity</strong>: O(log n) — This is because every time you divide by 2, you effectively halve the number of operations needed.</li> <li><strong>Space Complexity</strong>: O(1) — We’re only using a fixed amount of space (the variable <code class="language-plaintext highlighter-rouge">i</code>).</li> </ul> <h3 id="references">References</h3> <ul> <li><a href="https://leetcode.com/problems/number-of-steps-to-reduce-a-number-to-zero/">LeetCode Problem 1342</a></li> <li><a href="https://docs.oracle.com/javase/8/docs/api/">Java Documentation</a><br/> Happy coding!</li> </ul>]]></content><author><name></name></author><category term="LeetCode"/><category term="Programming Challenges"/><category term="Java"/><category term="Coding"/><summary type="html"><![CDATA[In this post, I’ll walk you through my solution for LeetCode problem 1342—how to reduce a number to zero step by step. Let’s dive into the code and break it down!]]></summary></entry><entry><title type="html">Leetcode Question 412: Fizz Buzz - My Simple Solution</title><link href="https://balasubramanyamlanka.com/leetcode-question-412-fizz-buzz-my-simple-solution/" rel="alternate" type="text/html" title="Leetcode Question 412: Fizz Buzz - My Simple Solution"/><published>2024-12-05T00:36:10+00:00</published><updated>2024-12-05T00:36:10+00:00</updated><id>https://balasubramanyamlanka.com/leetcode-question-412:-fizz-buzz---my-simple-solution</id><content type="html" xml:base="https://balasubramanyamlanka.com/leetcode-question-412-fizz-buzz-my-simple-solution/"><![CDATA[<h3 id="the-fizz-buzz-problem">The Fizz Buzz Problem</h3> <p>Here’s the deal: you get a number <code class="language-plaintext highlighter-rouge">n</code>, and your task is to print an array with the numbers from 1 to <code class="language-plaintext highlighter-rouge">n</code>, but instead of multiples of 3, you do “Fizz”, multiples of 5 become “Buzz”, and for numbers that are multiples of both 3 and 5, you print “FizzBuzz”. Pretty straightforward, right? Let’s break it down.</p> <p>Here’s the full problem statement if you want to check it out:</p> <ul> <li>Write a program that outputs the string representation of numbers from 1 to <code class="language-plaintext highlighter-rouge">n</code>.</li> <li>But for multiples of three it should output “Fizz” instead of the number.</li> <li>For the multiples of five output “Buzz”.</li> <li>For numbers which are multiples of both three and five output “FizzBuzz”.</li> </ul> <h3 id="my-fizz-buzz-solution">My Fizz Buzz Solution</h3> <p>Here’s how I whipped this up in Java:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">fizzBuzz</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">answer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">ans</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">ans</span> <span class="o">+=</span> <span class="s">"Fizz"</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">ans</span> <span class="o">+=</span> <span class="s">"Buzz"</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">ans</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">ans</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="n">answer</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">ans</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <h3 id="complexity-analysis">Complexity Analysis</h3> <p>Now, let’s chat about performance because, let’s face it, nobody likes shit code that runs like a snail.</p> <ul> <li> <p><strong>Time Complexity</strong>: This bad boy runs in O(n) time because we’re looping through numbers from 1 to <code class="language-plaintext highlighter-rouge">n</code>. Each iteration checks conditions and does basic string operations, so there are no hidden surprises here.</p> </li> <li> <p><strong>Space Complexity</strong>: The space complexity is O(n) as well because we’re storing up to <code class="language-plaintext highlighter-rouge">n</code> strings in our list. That’s pretty standard for problems that require returning collections.</p> </li> </ul> <p>References:</p> <ul> <li><a href="https://leetcode.com/problems/fizz-buzz/">Leetcode Problem 412: Fizz Buzz</a></li> <li><a href="https://docs.oracle.com/javase/8/docs/api/">Java Documentation</a></li> </ul> <p>And that’s a wrap, folks! Happy coding, and remember: keep it funky.</p>]]></content><author><name></name></author><category term="Programming"/><category term="Leetcode"/><category term="FizzBuzz"/><category term="CodingChallenges"/><summary type="html"><![CDATA[In this post, I’m sharing my resolution to Leetcode’s Fizz Buzz problem. It’s simple yet useful, so let's dive in together!]]></summary></entry><entry><title type="html">LeetCode Problem 1672: Solving the Richest Customer Wealth Challenge</title><link href="https://balasubramanyamlanka.com/leetcode-problem-1672-solving-the-richest-customer-wealth-challenge/" rel="alternate" type="text/html" title="LeetCode Problem 1672: Solving the Richest Customer Wealth Challenge"/><published>2024-12-05T00:31:05+00:00</published><updated>2024-12-05T00:31:05+00:00</updated><id>https://balasubramanyamlanka.com/leetcode-problem-1672:-solving-the-richest-customer-wealth-challenge</id><content type="html" xml:base="https://balasubramanyamlanka.com/leetcode-problem-1672-solving-the-richest-customer-wealth-challenge/"><![CDATA[<h3 id="the-problem">The Problem</h3> <p>You’re given a 2D array <code class="language-plaintext highlighter-rouge">accounts</code>, where each row represents a customer, and each column represents the amount of money they have in different banks. Your job is to find out which customer is the richest. In other words, you need to find out the maximum wealth among all customers.</p> <p>Visualize it like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>accounts = [[1, 2, 3],
            [3, 2, 1],
            [4, 5, 6]]
</code></pre></div></div> <p>Here, the first customer has wealth of 6, the second has 6 as well, and the third has 15. So the answer is 15.</p> <h3 id="the-solution">The Solution</h3> <p>Here’s how I went about solving this thing in Java. I mean, it’s pretty basic but hey, it works like a charm! Here’s the code:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">maximumWealth</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">accounts</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">richKid</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>  <span class="c1">// Store the wealth of the richest customer</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">accounts</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>  <span class="c1">// Loop through each customer</span>
            <span class="kt">int</span> <span class="n">custWealth</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>  <span class="c1">// Reset customer's wealth for each customer</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">accounts</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>  <span class="c1">// Loop through each bank account</span>
                <span class="n">custWealth</span> <span class="o">+=</span> <span class="n">accounts</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>  <span class="c1">// Add the wealth for this customer</span>
            <span class="o">}</span>
            <span class="c1">// Update richKid if current customer's wealth is greater</span>
            <span class="n">richKid</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">richKid</span><span class="o">,</span> <span class="n">custWealth</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">richKid</span><span class="o">;</span>  <span class="c1">// Return the maximum wealth found</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <h3 id="complexity">Complexity</h3> <ul> <li><strong>Time Complexity</strong>: O(m * n), where m is the number of customers and n is the number of banks. Clearly, we’re checking every account for every customer.</li> <li><strong>Space Complexity</strong>: O(1), since we’re using only a few additional variables for calculations.</li> </ul> <h3 id="references">References</h3> <ul> <li><a href="https://leetcode.com/problems/richest-customer-wealth/">LeetCode Problem 1672</a></li> <li><a href="https://docs.oracle.com/javase/8/docs/api/">Java Documentation</a></li> </ul>]]></content><author><name></name></author><category term="Programming"/><category term="LeetCode Solutions"/><category term="Java"/><category term="Algorithm"/><summary type="html"><![CDATA[Dive into my journey of tackling LeetCode problem 1672, where I dissect the simplest way to find the richest customer in a matrix of accounts. Grab a coffee and let's code!]]></summary></entry></feed>