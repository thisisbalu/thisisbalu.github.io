<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://balasubramanyamlanka.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://balasubramanyamlanka.com/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-12-05T06:08:42+00:00</updated><id>https://balasubramanyamlanka.com/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Mastering Kubernetes Limits and Requests: A Programmer’s Guide to Staying in Control</title><link href="https://balasubramanyamlanka.com/mastering-kubernetes-limits-and-requests-a-programmer's-guide-to-staying-in-control/" rel="alternate" type="text/html" title="Mastering Kubernetes Limits and Requests: A Programmer’s Guide to Staying in Control"/><published>2024-12-03T05:45:42+00:00</published><updated>2024-12-03T05:45:42+00:00</updated><id>https://balasubramanyamlanka.com/mastering-kubernetes-limits-and-requests:-a-programmer&apos;s-guide-to-staying-in-control</id><content type="html" xml:base="https://balasubramanyamlanka.com/mastering-kubernetes-limits-and-requests-a-programmer&apos;s-guide-to-staying-in-control/"><![CDATA[<hr/> <p>Hey there, fellow code wranglers! Today, we’re going to chat about something that often causes programmers to scratch their heads: Kubernetes limits and requests. Trust me, getting these two concepts straight can save you a hell of a lot of frustration in production. So grab your favorite beverage, kick back, and let’s explore how these bad boys make your life easier when managing Kubernetes resources.</p> <h3 id="what-the-heck-are-limits-and-requests">What the Heck Are Limits and Requests?</h3> <p>Alright, before we jump into the nitty-gritty, let’s quickly define what we mean by limits and requests.</p> <ol> <li> <p><strong>Requests</strong> tell Kubernetes the minimum amount of CPU and memory you need for your application to run. Think of it as the bare minimum to keep things humming along smoothly.</p> </li> <li> <p><strong>Limits</strong>, on the other hand, are like the bouncers at a club. They set a cap on how much CPU and memory your application can use. This is critical if you want to avoid a situation where one resource hog crashes the whole party (read: cluster).</p> </li> </ol> <h3 id="the-many-ways-to-use-limits-and-requests">The Many Ways to Use Limits and Requests</h3> <p>Now, let’s check out how we can use these concepts effectively. Spoiler alert: there are several approaches, and you’ll probably want to experiment with a few to see which fits your needs.</p> <h4 id="1-specifying-resources-in-yaml">1. Specifying Resources in YAML</h4> <p>The most straightforward way to set limits and requests is in your Pod specification (the good old YAML). Let’s say we’ve got a simple app running a web server. Here’s how you could define requests and limits:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">my-web-app</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">containers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">web-server</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">nginx:latest</span>
    <span class="na">resources</span><span class="pi">:</span>
      <span class="na">requests</span><span class="pi">:</span>
        <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">64Mi"</span>
        <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">250m"</span>
      <span class="na">limits</span><span class="pi">:</span>
        <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">128Mi"</span>
        <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">500m"</span>
</code></pre></div></div> <p>In this example, our pod requests 64Mi of memory and 250m (milli) CPU but can use up to 128Mi and 500m when the going gets tough. This is great for maintaining a smooth user experience while still being kind to your Kubernetes cluster.</p> <h4 id="2-default-resource-quotas-for-namespaces">2. Default Resource Quotas for Namespaces</h4> <p>Did you know you could set default limits and requests for an entire namespace? This is a handy trick if you want to enforce consistency across different teams or applications.</p> <p>Here’s how to set up a ResourceQuota:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ResourceQuota</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">my-resource-quota</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">my-namespace</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">hard</span><span class="pi">:</span>
    <span class="na">requests.memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">1Gi"</span>
    <span class="na">requests.cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">1"</span>
    <span class="na">limits.memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">2Gi"</span>
    <span class="na">limits.cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">2"</span>
</code></pre></div></div> <p>With this config, any new pods created in <code class="language-plaintext highlighter-rouge">my-namespace</code> will inherit these limits unless overridden in the Pod spec. It’s like setting parental controls for your resources. You don’t want your kids (ahem, workloads) going nuts!</p> <h4 id="3-vertical-pod-autoscaler-vpa">3. Vertical Pod Autoscaler (VPA)</h4> <p>If you’re looking to automate your resource management, check out the Vertical Pod Autoscaler (VPA). This tool can adjust requests and limits based on actual usage over time.</p> <p>Here’s an example of deploying VPA for our earlier web server:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">autoscaling.k8s.io/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">VerticalPodAutoscaler</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">my-web-app-vpa</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">targetRef</span><span class="pi">:</span>
    <span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
    <span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">my-web-app</span>
  <span class="na">updatePolicy</span><span class="pi">:</span>
    <span class="na">updateMode</span><span class="pi">:</span> <span class="s">Auto</span>
</code></pre></div></div> <p>With VPA in the mix, you won’t need to constantly babysit your workloads. It’ll take care of scaling those resource requests and limits for you—how sweet is that?</p> <h4 id="4-horizontal-pod-autoscaler-hpa">4. Horizontal Pod Autoscaler (HPA)</h4> <p>If you’re dealing with fluctuating traffic, the Horizontal Pod Autoscaler comes to the rescue. Although it’s more about scaling the number of pods rather than limits/requests directly, it’s great to know about.</p> <p>Here’s how you can set it up:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">autoscaling/v2beta2</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">HorizontalPodAutoscaler</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">my-hpa</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">scaleTargetRef</span><span class="pi">:</span>
    <span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
    <span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">my-web-app</span>
  <span class="na">minReplicas</span><span class="pi">:</span> <span class="m">1</span>
  <span class="na">maxReplicas</span><span class="pi">:</span> <span class="m">10</span>
  <span class="na">metrics</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">type</span><span class="pi">:</span> <span class="s">Pods</span>
    <span class="na">pods</span><span class="pi">:</span>
      <span class="na">metric</span><span class="pi">:</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">requests</span>
      <span class="na">target</span><span class="pi">:</span>
        <span class="na">type</span><span class="pi">:</span> <span class="s">AverageValue</span>
        <span class="na">averageValue</span><span class="pi">:</span> <span class="s2">"</span><span class="s">500m"</span>
</code></pre></div></div> <p>With the HPA in action, your deployment can scale from as few as 1 pod to as many as 10 depending on the number of requests. No resource wastage here, just lazy scaling.</p> <h4 id="5-pod-affinity-and-anti-affinity-rules">5. Pod Affinity and Anti-Affinity Rules</h4> <p>Sometimes, you might want to control where your pods land in the cluster. These rules let you specify whether your pod should be co-located with other pods or kept as far away as possible. Not quite limits and requests, but important for resource efficiency!</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">my-affinity-deployment</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">3</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">my-app</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">my-app</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">affinity</span><span class="pi">:</span>
        <span class="na">podAffinity</span><span class="pi">:</span>
          <span class="na">requiredDuringSchedulingIgnoredDuringExecution</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">labelSelector</span><span class="pi">:</span>
              <span class="na">matchExpressions</span><span class="pi">:</span>
              <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span> <span class="s">app</span>
                <span class="na">operator</span><span class="pi">:</span> <span class="s">In</span>
                <span class="na">values</span><span class="pi">:</span>
                <span class="pi">-</span> <span class="s">my-app</span>
            <span class="na">topologyKey</span><span class="pi">:</span> <span class="s2">"</span><span class="s">kubernetes.io/hostname"</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">my-app</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">my-image:latest</span>
</code></pre></div></div> <p>This ensures that your pods with <code class="language-plaintext highlighter-rouge">my-app</code> label are scheduled on the same host, which may be useful for caching reasons or reducing latency.</p> <h3 id="conclusion">Conclusion</h3> <p>Phew! That was a whirlwind tour of Kubernetes limits and requests! Whether you’re putting them in your YAML files, setting up ResourceQuotas, utilizing VPA or HPA, or messing with affinities, I hope you now see how these concepts can help manage resources better and maintain a stable environment.</p> <p>Get ready to say goodbye to resource bottlenecks and hello to seamless scaling. Go forth and optimize with confidence!</p> <p>References:</p> <ul> <li><a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/">Kubernetes Resource Management</a></li> <li><a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/">Kubernetes HPA</a></li> <li><a href="https://github.com/kubernetes/autoscaler/tree/master/vertical-pod-autoscaler">Kubernetes VPA</a></li> </ul>]]></content><author><name></name></author><category term="Kubernetes"/><category term="DevOps"/><category term="containerization"/><category term="resource_management"/><summary type="html"><![CDATA[Dive into the nitty-gritty of Kubernetes limits and requests. This article breaks down the concepts with practical examples, so you can keep your resources in check without losing your mind.]]></summary></entry><entry><title type="html">A Lazy Programmer’s Guide to ConfigMaps in OCP and Kubernetes: The Good, The Bad, and The Configurable</title><link href="https://balasubramanyamlanka.com/a-lazy-programmer's-guide-to-configmaps-in-ocp-and-kubernetes-the-good,-the-bad,-and-the-configurable/" rel="alternate" type="text/html" title="A Lazy Programmer’s Guide to ConfigMaps in OCP and Kubernetes: The Good, The Bad, and The Configurable"/><published>2024-12-02T20:21:40+00:00</published><updated>2024-12-02T20:21:40+00:00</updated><id>https://balasubramanyamlanka.com/a-lazy-programmer&apos;s-guide-to-configmaps-in-ocp-and-kubernetes:-the-good,-the-bad,-and-the-configurable</id><content type="html" xml:base="https://balasubramanyamlanka.com/a-lazy-programmer&apos;s-guide-to-configmaps-in-ocp-and-kubernetes-the-good,-the-bad,-and-the-configurable/"><![CDATA[<p>Alright, fellow code wranglers! Today, I’m diving into one of those magical things that makes configuring your applications in Kubernetes and OpenShift so much easier—ConfigMaps. Sounds fancy, right? But what are they, and why should you give a damn? Let’s break it down, with a sprinkle of humor and some code to keep things spicy.</p> <h3 id="what-the-heck-is-a-configmap">What the Heck is a ConfigMap?</h3> <p>In plain English, a ConfigMap is a Kubernetes object that lets you separate your configuration data from your application code. This means you can change the configuration without having to recompile or redeploy your app, which is pretty sweet. Whether you’re working in Kubernetes or OpenShift (which is basically Kubernetes on steroids), ConfigMaps are your go-to for managing non-sensitive configuration data.</p> <h3 id="why-should-you-even-use-configmaps">Why Should You Even Use ConfigMaps?</h3> <p><strong>Pros</strong>:</p> <ol> <li><strong>Decoupling Config from App Code</strong>: This is like the biggest plus. Your app becomes more flexible and easier to manage.</li> <li><strong>Easy Updates</strong>: Change configs on-the-fly without redeploying your app. It’s like changing clothes without taking a shower.</li> <li><strong>Reusability</strong>: You can use the same ConfigMap across multiple deployments. It’s like having that one cool shirt you can wear to any party.</li> <li><strong>Version Control</strong>: You can use ConfigMaps in conjunction with GitOps practices for better version control.</li> </ol> <p><strong>Cons</strong>:</p> <ol> <li><strong>Complexity</strong>: Sure, they love to tout decoupling, but adding another layer of abstraction can get messy.</li> <li><strong>Memory Overhead</strong>: If you are storing large amounts of data, this can add some bloat and cost—so don’t overdo it like that extra cheese on your pizza.</li> <li><strong>Limitations for Sensitive Data</strong>: ConfigMaps aren’t meant for sensitive info like passwords or secrets. That’s what Secrets are for.</li> </ol> <h3 id="possible-setups-for-configmaps">Possible Setups for ConfigMaps</h3> <h4 id="1-basic-configmap-creation">1. Basic ConfigMap Creation</h4> <p>Creating a ConfigMap is as simple as saying “abracadabra.” You can create it from a literal value, a file, or even from environment variables.</p> <p><strong>Creating from a Literal Value:</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl create configmap my-config <span class="nt">--from-literal</span><span class="o">=</span><span class="nv">key1</span><span class="o">=</span>value1 <span class="nt">--from-literal</span><span class="o">=</span><span class="nv">key2</span><span class="o">=</span>value2
</code></pre></div></div> <p><strong>Creating from a File:</strong></p> <p>Imagine you have a <code class="language-plaintext highlighter-rouge">config.txt</code> file with your key-value pairs.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl create configmap my-config <span class="nt">--from-file</span><span class="o">=</span>config.txt
</code></pre></div></div> <p><strong>Creating from Environment Variables:</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl create configmap my-env-config <span class="nt">--from-env-file</span><span class="o">=</span>env.list
</code></pre></div></div> <h4 id="2-using-configmap-in-pods">2. Using ConfigMap in Pods</h4> <p>Perfect, you’ve created a ConfigMap—now how do you use it? There are a few ways to do this in your Pods: using environment variables or mounting the ConfigMap as a volume.</p> <p><strong>Using as Environment Variables:</strong></p> <p>Here’s a simple deployment YAML that pulls in the ConfigMap values:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">my-app</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">2</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">my-app</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">my-app</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">my-container</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">my-image:latest</span>
        <span class="na">env</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">KEY1</span>
          <span class="na">valueFrom</span><span class="pi">:</span>
            <span class="na">configMapKeyRef</span><span class="pi">:</span>
              <span class="na">name</span><span class="pi">:</span> <span class="s">my-config</span>
              <span class="na">key</span><span class="pi">:</span> <span class="s">key1</span>
</code></pre></div></div> <p><strong>Mounting as a Volume:</strong></p> <p>If you want to mount the ConfigMap into your file system, you can do it like this:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">my-app</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">2</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">my-app</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">my-app</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">my-container</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">my-image:latest</span>
        <span class="na">volumeMounts</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">config-volume</span>
          <span class="na">mountPath</span><span class="pi">:</span> <span class="s">/etc/config</span>
      <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">config-volume</span>
        <span class="na">configMap</span><span class="pi">:</span>
          <span class="na">name</span><span class="pi">:</span> <span class="s">my-config</span>
</code></pre></div></div> <h3 id="3-updating-a-configmap">3. Updating a ConfigMap</h3> <p>Updating is where it gets fun. You can edit a ConfigMap with a simple command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl edit configmap my-config
</code></pre></div></div> <p>Run that bad boy, make your changes, and boom—your deployment will automatically pick up the new config (as long as you’re on a rolling update!).</p> <p>However, keep in mind that if you change the ConfigMap, you’ll still need to restart your Pods to see changes reflected. No magic here, folks.</p> <h3 id="conclusion">Conclusion</h3> <p>So that’s the lowdown on ConfigMaps in Kubernetes and OpenShift. They can simplify your life, making your application more flexible, but they can also complicate things if you’re not careful. There’s a balance, as with all things in life—or at least your code deployment pipeline.</p> <p>Just remember, though, ConfigMaps are great for configuration management, but don’t get lazy and try to put everything in them—keep some data in Secrets for that sensitive stuff, and don’t forget to manage your ConfigMaps like the precious gems they are!</p> <h3 id="references">References</h3> <ul> <li><a href="https://kubernetes.io/docs/concepts/configuration/configmap/">Kubernetes Official ConfigMap Documentation</a></li> <li><a href="https://docs.openshift.com/container-platform/latest/nodes/pods-nodes.html#configmap-overview">OpenShift ConfigMap Documentation</a></li> <li><a href="https://kubernetes.io/docs/concepts/configuration/overview/#manifests-and-yaml">Kubernetes YAML Basics</a></li> </ul>]]></content><author><name></name></author><category term="Kubernetes"/><category term="DevOps"/><category term="ConfigMaps"/><category term="OCP"/><summary type="html"><![CDATA[Dive into the world of ConfigMaps in OpenShift and Kubernetes with this laid-back guide that weighs the pros and cons and explores various setups with easy-to-digest code snippets.]]></summary></entry><entry><title type="html">Understanding keepAliveRestCallSec vs connectionTimeoutAlive in HTTP Requests</title><link href="https://balasubramanyamlanka.com/understanding-keepAliveRestCallSec-vs-connectionTimeoutAlive-in-HTTP-requests/" rel="alternate" type="text/html" title="Understanding keepAliveRestCallSec vs connectionTimeoutAlive in HTTP Requests"/><published>2023-11-04T18:40:40+00:00</published><updated>2023-11-04T18:40:40+00:00</updated><id>https://balasubramanyamlanka.com/understanding-keepAliveRestCallSec-vs-connectionTimeoutAlive-in-HTTP-requests</id><content type="html" xml:base="https://balasubramanyamlanka.com/understanding-keepAliveRestCallSec-vs-connectionTimeoutAlive-in-HTTP-requests/"><![CDATA[<p>When working with HTTP requests in a programming environment, it’s crucial to understand the significance of parameters like <code class="language-plaintext highlighter-rouge">keepAliveRestCallSec</code> and <code class="language-plaintext highlighter-rouge">connectionTimeoutAlive</code>. These parameters play a vital role in managing the lifecycle of a connection and ensuring smooth communication between the client and server.</p> <p>In this article, we’ll delve into the details of <code class="language-plaintext highlighter-rouge">keepAliveRestCallSec</code> and <code class="language-plaintext highlighter-rouge">connectionTimeoutAlive</code>, discussing their purpose, usage, and how they affect the behavior of your HTTP requests.</p> <h2 id="what-is-keepaliverestcallsec">What is keepAliveRestCallSec?</h2> <p><code class="language-plaintext highlighter-rouge">keepAliveRestCallSec</code> is a parameter that controls the time duration, in seconds, for which an HTTP connection is kept alive after a REST call. This means that once a REST call is made, the connection will remain open for the specified duration, allowing for potential subsequent requests to be made without the overhead of establishing a new connection.</p> <h3 id="example-usage">Example Usage:</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.net.HttpURLConnection</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.net.URL</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HttpClient</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">apiUrl</span> <span class="o">=</span> <span class="s">"https://api.example.com/data"</span><span class="o">;</span>
        <span class="no">URL</span> <span class="n">url</span> <span class="o">=</span> <span class="k">new</span> <span class="no">URL</span><span class="o">(</span><span class="n">apiUrl</span><span class="o">);</span>
        <span class="nc">HttpURLConnection</span> <span class="n">connection</span> <span class="o">=</span> <span class="o">(</span><span class="nc">HttpURLConnection</span><span class="o">)</span> <span class="n">url</span><span class="o">.</span><span class="na">openConnection</span><span class="o">();</span>
        
        <span class="c1">// Set the keepAliveRestCallSec to 60 seconds</span>
        <span class="n">connection</span><span class="o">.</span><span class="na">setRequestProperty</span><span class="o">(</span><span class="s">"Connection"</span><span class="o">,</span> <span class="s">"keep-alive"</span><span class="o">);</span>
        <span class="n">connection</span><span class="o">.</span><span class="na">setReadTimeout</span><span class="o">(</span><span class="mi">10000</span><span class="o">);</span> <span class="c1">// Read timeout in milliseconds</span>
        <span class="n">connection</span><span class="o">.</span><span class="na">setConnectTimeout</span><span class="o">(</span><span class="mi">10000</span><span class="o">);</span> <span class="c1">// Connection timeout in milliseconds</span>
        <span class="n">connection</span><span class="o">.</span><span class="na">connect</span><span class="o">();</span>

        <span class="c1">// Make your HTTP request here</span>

        <span class="c1">// The connection will remain open for 60 seconds</span>
        <span class="c1">// You can make subsequent requests within this time frame</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p>In this example, the <code class="language-plaintext highlighter-rouge">keep_alive_rest_call_sec</code> parameter is set to 60 seconds. This means that after making the initial <code class="language-plaintext highlighter-rouge">GET</code> request to <code class="language-plaintext highlighter-rouge">https://api.example.com/data</code>, the connection will stay alive for one minute, during which additional requests can be made without the need to establish a new connection.</p> <h2 id="what-is-connectiontimeoutalive">What is connectionTimeoutAlive?</h2> <p>On the other hand, <code class="language-plaintext highlighter-rouge">connectionTimeoutAlive</code> is a parameter that defines the maximum time, in seconds, that a connection can remain idle before it is considered timed out. If no activity occurs within this specified time frame, the connection will be closed.</p> <h3 id="example-usage-1">Example Usage:</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.net.HttpURLConnection</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.net.URL</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HttpClient</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">apiUrl</span> <span class="o">=</span> <span class="s">"https://api.example.com/data"</span><span class="o">;</span>
        <span class="no">URL</span> <span class="n">url</span> <span class="o">=</span> <span class="k">new</span> <span class="no">URL</span><span class="o">(</span><span class="n">apiUrl</span><span class="o">);</span>
        <span class="nc">HttpURLConnection</span> <span class="n">connection</span> <span class="o">=</span> <span class="o">(</span><span class="nc">HttpURLConnection</span><span class="o">)</span> <span class="n">url</span><span class="o">.</span><span class="na">openConnection</span><span class="o">();</span>
        
        <span class="c1">// Set the connectionTimeoutAlive to 30 seconds</span>
        <span class="n">connection</span><span class="o">.</span><span class="na">setRequestProperty</span><span class="o">(</span><span class="s">"Connection"</span><span class="o">,</span> <span class="s">"close"</span><span class="o">);</span>
        <span class="n">connection</span><span class="o">.</span><span class="na">setReadTimeout</span><span class="o">(</span><span class="mi">10000</span><span class="o">);</span> <span class="c1">// Read timeout in milliseconds</span>
        <span class="n">connection</span><span class="o">.</span><span class="na">setConnectTimeout</span><span class="o">(</span><span class="mi">10000</span><span class="o">);</span> <span class="c1">// Connection timeout in milliseconds</span>
        <span class="n">connection</span><span class="o">.</span><span class="na">connect</span><span class="o">();</span>

        <span class="c1">// Make your HTTP request here</span>

        <span class="c1">// The connection will be considered timed out if idle for 30 seconds</span>
        <span class="c1">// Subsequent requests will require establishing a new connection</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p>In this example, the <code class="language-plaintext highlighter-rouge">connection_timeout_alive</code> parameter is set to 30 seconds. This means that if no activity occurs within the connection for 30 seconds, it will be considered timed out, and subsequent requests will require establishing a new connection.</p> <h2 id="choosing-the-right-values">Choosing the Right Values</h2> <p>Selecting appropriate values for <code class="language-plaintext highlighter-rouge">keepAliveRestCallSec</code> and <code class="language-plaintext highlighter-rouge">connectionTimeoutAlive</code> depends on various factors, including the nature of your application, the expected frequency of requests, and the server’s configuration.</p> <h3 id="considerations">Considerations:</h3> <ol> <li> <p><strong>Frequency of Requests</strong>: If your application makes frequent requests to a server, setting a higher value for <code class="language-plaintext highlighter-rouge">keepAliveRestCallSec</code> can help reduce the overhead of establishing new connections for each request.</p> </li> <li> <p><strong>Server Load</strong>: Consider the load on the server. If the server has limited resources, keeping connections alive for extended periods may not be feasible, and a shorter <code class="language-plaintext highlighter-rouge">keepAliveRestCallSec</code> value might be more appropriate.</p> </li> <li> <p><strong>Network Conditions</strong>: In environments with unstable or high-latency networks, a longer <code class="language-plaintext highlighter-rouge">keepAliveRestCallSec</code> value can be beneficial to avoid the overhead of establishing new connections.</p> </li> <li> <p><strong>Security Considerations</strong>: Be cautious with long-lived connections, as they may be more susceptible to security vulnerabilities. Always consider the security implications of keeping connections open for extended periods.</p> </li> </ol> <h2 id="handling-connection-timeouts">Handling Connection Timeouts</h2> <p>While <code class="language-plaintext highlighter-rouge">keepAliveRestCallSec</code> helps in keeping connections alive for subsequent requests, <code class="language-plaintext highlighter-rouge">connectionTimeoutAlive</code> ensures that connections do not remain idle for too long, potentially tying up server resources.</p> <p>It’s important to strike a balance between these two parameters to optimize the performance and resource utilization of your application.</p> <h3 id="example-scenario">Example Scenario:</h3> <p>Let’s consider an e-commerce application that needs to fetch product details from a remote server. In this scenario, setting <code class="language-plaintext highlighter-rouge">keepAliveRestCallSec</code> to 60 seconds would allow the application to make multiple requests to the server within a minute without incurring the overhead of establishing new connections. Meanwhile, setting <code class="language-plaintext highlighter-rouge">connectionTimeoutAlive</code> to 30 seconds ensures that if a user’s session becomes idle, the connection is eventually released, freeing up server resources.</p> <h2 id="closing-thoughts">Closing Thoughts</h2> <p>Understanding the roles of <code class="language-plaintext highlighter-rouge">keepAliveRestCallSec</code> and <code class="language-plaintext highlighter-rouge">connectionTimeoutAlive</code> in HTTP requests is crucial for optimizing the performance of your applications. By carefully considering factors such as request frequency, server load, and network conditions, you can fine-tune these parameters to achieve an optimal balance between connection reuse and resource utilization.</p> <p>Remember to regularly monitor and adjust these parameters based on the evolving requirements and conditions of your application.</p>]]></content><author><name></name></author><category term="Java"/><category term="serialization"/><summary type="html"><![CDATA[Differences between connectionRequestTimeout, connectionTimeout, and socketTimeout in networking. Learn how these parameters influence connection establishment, pool management, and data transmission in HTTP client libraries.]]></summary></entry><entry><title type="html">SerializationFeature in ObjectMapper with Code Examples</title><link href="https://balasubramanyamlanka.com/serializationfeature-in-objectmapper-with-code-examples/" rel="alternate" type="text/html" title="SerializationFeature in ObjectMapper with Code Examples"/><published>2023-10-20T18:40:40+00:00</published><updated>2023-10-20T18:40:40+00:00</updated><id>https://balasubramanyamlanka.com/serializationfeature-in-objectmapper-with-code-examples</id><content type="html" xml:base="https://balasubramanyamlanka.com/serializationfeature-in-objectmapper-with-code-examples/"><![CDATA[<p>Hello fellow code crafters! Today, we embark on a journey through the fascinating world of serialization in Java. Specifically, we’ll be diving deep into the <code class="language-plaintext highlighter-rouge">SerializationFeature</code> enum, a powerful tool in the Jackson library’s arsenal. This feature enables fine-grained control over how objects are serialized. By the end of this guide, you’ll be equipped to wield these features with confidence and precision. Let’s get started!</p> <h2 id="understanding-serializationfeature"><strong>Understanding SerializationFeature</strong></h2> <p>The <code class="language-plaintext highlighter-rouge">SerializationFeature</code> enum is a part of the Jackson library, which is widely used for JSON processing in Java. It provides a plethora of options to customize the serialization process according to your specific needs. From formatting dates to handling null values, this feature is a Swiss army knife for serialization.</p> <h2 id="configuring-objectmapper-with-serializationfeature"><strong>Configuring ObjectMapper with SerializationFeature</strong></h2> <p>Before we dive into the details, let’s set up our ObjectMapper with some common SerializationFeatures.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.ObjectMapper</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.SerializationFeature</span><span class="o">;</span>

<span class="nc">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectMapper</span><span class="o">();</span>
</code></pre></div></div> <p>Now, let’s explore some of the most commonly used SerializationFeatures and see how they impact the serialization process.</p> <h3 id="1-indent_output-making-json-readable"><strong>1. <code class="language-plaintext highlighter-rouge">INDENT_OUTPUT</code>: Making JSON Readable</strong></h3> <p>This feature adds indentation to the JSON output, making it more human-readable.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">objectMapper</span><span class="o">.</span><span class="na">enable</span><span class="o">(</span><span class="nc">SerializationFeature</span><span class="o">.</span><span class="na">INDENT_OUTPUT</span><span class="o">);</span>
</code></pre></div></div> <p><strong>Example:</strong></p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectMapper</span><span class="o">();</span>
        <span class="n">objectMapper</span><span class="o">.</span><span class="na">enable</span><span class="o">(</span><span class="nc">SerializationFeature</span><span class="o">.</span><span class="na">INDENT_OUTPUT</span><span class="o">);</span>

        <span class="nc">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"John Doe"</span><span class="o">,</span> <span class="mi">30</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">jsonOutput</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">person</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">jsonOutput</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p><strong>Output:</strong></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"name"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"John Doe"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"age"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">30</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h3 id="2-write_dates_as_timestamps-controlling-date-serialization"><strong>2. <code class="language-plaintext highlighter-rouge">WRITE_DATES_AS_TIMESTAMPS</code>: Controlling Date Serialization</strong></h3> <p>This feature allows you to control how dates are serialized, whether as timestamps or in a more human-readable format.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">objectMapper</span><span class="o">.</span><span class="na">disable</span><span class="o">(</span><span class="nc">SerializationFeature</span><span class="o">.</span><span class="na">WRITE_DATES_AS_TIMESTAMPS</span><span class="o">);</span>
</code></pre></div></div> <p><strong>Example:</strong></p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.time.LocalDateTime</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Event</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="nc">LocalDateTime</span> <span class="n">dateTime</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="nf">Event</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">LocalDateTime</span> <span class="n">dateTime</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">dateTime</span> <span class="o">=</span> <span class="n">dateTime</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectMapper</span><span class="o">();</span>
        <span class="n">objectMapper</span><span class="o">.</span><span class="na">disable</span><span class="o">(</span><span class="nc">SerializationFeature</span><span class="o">.</span><span class="na">WRITE_DATES_AS_TIMESTAMPS</span><span class="o">);</span>

        <span class="nc">LocalDateTime</span> <span class="n">eventTime</span> <span class="o">=</span> <span class="nc">LocalDateTime</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2023</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">14</span><span class="o">,</span> <span class="mi">12</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
        <span class="nc">Event</span> <span class="n">event</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Event</span><span class="o">(</span><span class="s">"Tech Conference"</span><span class="o">,</span> <span class="n">eventTime</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">jsonOutput</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">jsonOutput</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p><strong>Output:</strong></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"name"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"Tech Conference"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"dateTime"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"2023-10-14T12:30"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h3 id="3-fail_on_empty_beans-handling-empty-objects"><strong>3. <code class="language-plaintext highlighter-rouge">FAIL_ON_EMPTY_BEANS</code>: Handling Empty Objects</strong></h3> <p>This feature controls whether an exception should be thrown when serializing an empty object.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">objectMapper</span><span class="o">.</span><span class="na">disable</span><span class="o">(</span><span class="nc">SerializationFeature</span><span class="o">.</span><span class="na">FAIL_ON_EMPTY_BEANS</span><span class="o">);</span>
</code></pre></div></div> <p><strong>Example:</strong></p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">EmptyObject</span> <span class="o">{}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectMapper</span><span class="o">();</span>
        <span class="n">objectMapper</span><span class="o">.</span><span class="na">disable</span><span class="o">(</span><span class="nc">SerializationFeature</span><span class="o">.</span><span class="na">FAIL_ON_EMPTY_BEANS</span><span class="o">);</span>

        <span class="nc">EmptyObject</span> <span class="n">emptyObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">EmptyObject</span><span class="o">();</span>
        <span class="nc">String</span> <span class="n">jsonOutput</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">emptyObject</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">jsonOutput</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p><strong>Output:</strong></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{}</span><span class="w">
</span></code></pre></div></div> <h3 id="4-fail_on_self_references-preventing-cyclic-references"><strong>4. <code class="language-plaintext highlighter-rouge">FAIL_ON_SELF_REFERENCES</code>: Preventing Cyclic References</strong></h3> <p>This feature ensures that Jackson doesn’t run into an infinite loop when dealing with objects that have circular references.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">objectMapper</span><span class="o">.</span><span class="na">disable</span><span class="o">(</span><span class="nc">SerializationFeature</span><span class="o">.</span><span class="na">FAIL_ON_SELF_REFERENCES</span><span class="o">);</span>
</code></pre></div></div> <p><strong>Example:</strong></p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Node</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">data</span><span class="o">;</span>
    <span class="nc">Node</span> <span class="n">next</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="nf">Node</span><span class="o">(</span><span class="nc">String</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setNext</span><span class="o">(</span><span class="nc">Node</span> <span class="n">next</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectMapper</span><span class="o">();</span>
        <span class="n">objectMapper</span><span class="o">.</span><span class="na">disable</span><span class="o">(</span><span class="nc">SerializationFeature</span><span class="o">.</span><span class="na">FAIL_ON_SELF_REFERENCES</span><span class="o">);</span>

        <span class="nc">Node</span> <span class="n">node1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="s">"First"</span><span class="o">);</span>
        <span class="nc">Node</span> <span class="n">node2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="s">"Second"</span><span class="o">);</span>
        <span class="n">node1</span><span class="o">.</span><span class="na">setNext</span><span class="o">(</span><span class="n">node2</span><span class="o">);</span>
        <span class="n">node2</span><span class="o">.</span><span class="na">setNext</span><span class="o">(</span><span class="n">node1</span><span class="o">);</span> <span class="c1">// Circular reference</span>

        <span class="nc">String</span> <span class="n">jsonOutput</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">node1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">jsonOutput</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p><strong>Output:</strong></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">


  </span><span class="nl">"data"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"First"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"next"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"data"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"Second"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"next"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"data"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"First"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"next"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h3 id="5-wrap_root_value-wrapping-root-value"><strong>5. <code class="language-plaintext highlighter-rouge">WRAP_ROOT_VALUE</code>: Wrapping Root Value</strong></h3> <p>This feature allows you to wrap the root value in an additional JSON object.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">objectMapper</span><span class="o">.</span><span class="na">enable</span><span class="o">(</span><span class="nc">SerializationFeature</span><span class="o">.</span><span class="na">WRAP_ROOT_VALUE</span><span class="o">);</span>
</code></pre></div></div> <p><strong>Example:</strong></p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.fasterxml.jackson.annotation.JsonRootName</span><span class="o">;</span>

<span class="nd">@JsonRootName</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"Person"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectMapper</span><span class="o">();</span>
        <span class="n">objectMapper</span><span class="o">.</span><span class="na">enable</span><span class="o">(</span><span class="nc">SerializationFeature</span><span class="o">.</span><span class="na">WRAP_ROOT_VALUE</span><span class="o">);</span>

        <span class="nc">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"John Doe"</span><span class="o">,</span> <span class="mi">30</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">jsonOutput</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">person</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">jsonOutput</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p><strong>Output:</strong></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Person"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"name"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"John Doe"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"age"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">30</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h3 id="6-wrap_exceptions-wrapping-exceptions"><strong>6. <code class="language-plaintext highlighter-rouge">WRAP_EXCEPTIONS</code>: Wrapping Exceptions</strong></h3> <p>This feature wraps exceptions with a higher-level exception. This can be useful for providing more context when an exception occurs during serialization.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">objectMapper</span><span class="o">.</span><span class="na">enable</span><span class="o">(</span><span class="nc">SerializationFeature</span><span class="o">.</span><span class="na">WRAP_EXCEPTIONS</span><span class="o">);</span>
</code></pre></div></div> <p><strong>Example:</strong></p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">CustomException</span> <span class="kd">extends</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">code</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">CustomException</span><span class="o">(</span><span class="kt">int</span> <span class="n">code</span><span class="o">,</span> <span class="nc">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">code</span> <span class="o">=</span> <span class="n">code</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getCode</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">code</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">ErrorDetails</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">errorCode</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">errorMessage</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ErrorDetails</span><span class="o">(</span><span class="kt">int</span> <span class="n">errorCode</span><span class="o">,</span> <span class="nc">String</span> <span class="n">errorMessage</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">errorCode</span> <span class="o">=</span> <span class="n">errorCode</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">errorMessage</span> <span class="o">=</span> <span class="n">errorMessage</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectMapper</span><span class="o">();</span>
        <span class="n">objectMapper</span><span class="o">.</span><span class="na">enable</span><span class="o">(</span><span class="nc">SerializationFeature</span><span class="o">.</span><span class="na">WRAP_EXCEPTIONS</span><span class="o">);</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">CustomException</span><span class="o">(</span><span class="mi">404</span><span class="o">,</span> <span class="s">"Resource not found"</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">CustomException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">ErrorDetails</span> <span class="n">errorDetails</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ErrorDetails</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getCode</span><span class="o">(),</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="nc">String</span> <span class="n">jsonOutput</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">errorDetails</span><span class="o">);</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">jsonOutput</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">ex</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p><strong>Output:</strong></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"errorCode"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">404</span><span class="p">,</span><span class="w">
  </span><span class="nl">"errorMessage"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"Resource not found"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h3 id="7-eager_serializer_fetch-eager-serializer-fetch"><strong>7. <code class="language-plaintext highlighter-rouge">EAGER_SERIALIZER_FETCH</code>: Eager Serializer Fetch</strong></h3> <p>This feature determines whether to eagerly fetch a serializer for a specific type.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">objectMapper</span><span class="o">.</span><span class="na">enable</span><span class="o">(</span><span class="nc">SerializationFeature</span><span class="o">.</span><span class="na">EAGER_SERIALIZER_FETCH</span><span class="o">);</span>
</code></pre></div></div> <p><em>Note: This feature is typically used internally and might not be relevant for most application-level code.</em></p> <h3 id="8-close_closeable-closing-closeable"><strong>8. <code class="language-plaintext highlighter-rouge">CLOSE_CLOSEABLE</code>: Closing Closeable</strong></h3> <p>This feature ensures that Jackson will automatically close any <code class="language-plaintext highlighter-rouge">Closeable</code> resources after serialization.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">objectMapper</span><span class="o">.</span><span class="na">enable</span><span class="o">(</span><span class="nc">SerializationFeature</span><span class="o">.</span><span class="na">CLOSE_CLOSEABLE</span><span class="o">);</span>
</code></pre></div></div> <p><strong>Example:</strong></p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.ByteArrayOutputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.Closeable</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Resource</span> <span class="kd">implements</span> <span class="nc">Closeable</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">content</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Resource</span><span class="o">(</span><span class="nc">String</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">content</span> <span class="o">=</span> <span class="n">content</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getContent</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">content</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Resource closed."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectMapper</span><span class="o">();</span>
        <span class="n">objectMapper</span><span class="o">.</span><span class="na">enable</span><span class="o">(</span><span class="nc">SerializationFeature</span><span class="o">.</span><span class="na">CLOSE_CLOSEABLE</span><span class="o">);</span>

        <span class="k">try</span> <span class="o">(</span><span class="nc">Resource</span> <span class="n">resource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Resource</span><span class="o">(</span><span class="s">"Sample content"</span><span class="o">))</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">jsonOutput</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">resource</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">jsonOutput</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p><strong>Output:</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Resource closed.
</code></pre></div></div> <h3 id="9-flush_after_write_value-flushing-after-write"><strong>9. <code class="language-plaintext highlighter-rouge">FLUSH_AFTER_WRITE_VALUE</code>: Flushing After Write</strong></h3> <p>This feature controls whether Jackson will flush the output stream/writer after writing a value.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">objectMapper</span><span class="o">.</span><span class="na">enable</span><span class="o">(</span><span class="nc">SerializationFeature</span><span class="o">.</span><span class="na">FLUSH_AFTER_WRITE_VALUE</span><span class="o">);</span>
</code></pre></div></div> <p><em>Note: This feature is typically used internally and might not be relevant for most application-level code.</em></p> <h3 id="10-order_map_entries_by_keys-ordering-map-entries"><strong>10. <code class="language-plaintext highlighter-rouge">ORDER_MAP_ENTRIES_BY_KEYS</code>: Ordering Map Entries</strong></h3> <p>This feature determines whether to order entries in a Map by their keys.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">objectMapper</span><span class="o">.</span><span class="na">enable</span><span class="o">(</span><span class="nc">SerializationFeature</span><span class="o">.</span><span class="na">ORDER_MAP_ENTRIES_BY_KEYS</span><span class="o">);</span>
</code></pre></div></div> <p><strong>Example:</strong></p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.LinkedHashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectMapper</span><span class="o">();</span>
        <span class="n">objectMapper</span><span class="o">.</span><span class="na">enable</span><span class="o">(</span><span class="nc">SerializationFeature</span><span class="o">.</span><span class="na">ORDER_MAP_ENTRIES_BY_KEYS</span><span class="o">);</span>

        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">unorderedMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedHashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">unorderedMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"c"</span><span class="o">,</span> <span class="s">"C"</span><span class="o">);</span>
        <span class="n">unorderedMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"b"</span><span class="o">,</span> <span class="s">"B"</span><span class="o">);</span>
        <span class="n">unorderedMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"a"</span><span class="o">,</span> <span class="s">"A"</span><span class="o">);</span>

        <span class="nc">String</span> <span class="n">jsonOutput</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">unorderedMap</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span>

<span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">jsonOutput</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p><strong>Output:</strong></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"a"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"A"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"b"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"B"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"c"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"C"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h2 id="conclusion-mastering-serializationfeature"><strong>Conclusion: Mastering SerializationFeature</strong></h2> <p>You’ve now unlocked the power of <code class="language-plaintext highlighter-rouge">SerializationFeature</code> in ObjectMapper. These features give you fine-grained control over the serialization process, allowing you to tailor it to your specific requirements. Whether it’s formatting output, handling dates, or managing object references, <code class="language-plaintext highlighter-rouge">SerializationFeature</code> has got you covered.</p> <p>Remember, understanding these features can greatly enhance your ability to work with JSON data in Java. So go ahead, experiment, and craft your code with confidence!</p> <p><em>Reference Links:</em></p> <ul> <li><a href="https://github.com/FasterXML/jackson-databind">Jackson ObjectMapper Documentation</a></li> <li><a href="https://fasterxml.github.io/jackson-databind/javadoc/2.13/com/fasterxml/jackson/databind/SerializationFeature.html">SerializationFeature Enum Documentation</a></li> </ul> <p>Happy coding and may your JSON be well-serialized! 🚀</p>]]></content><author><name></name></author><category term="Java"/><category term="serialization"/><summary type="html"><![CDATA[Differences between connectionRequestTimeout, connectionTimeout, and socketTimeout in networking. Learn how these parameters influence connection establishment, pool management, and data transmission in HTTP client libraries.]]></summary></entry><entry><title type="html">Understanding Network Timeouts: connectionRequestTimeout, connectionTimeout, and socketTimeout</title><link href="https://balasubramanyamlanka.com/understanding-network-timeouts-connectionRequestTimeout-connectionTimeout-socketTimeout/" rel="alternate" type="text/html" title="Understanding Network Timeouts: connectionRequestTimeout, connectionTimeout, and socketTimeout"/><published>2023-10-14T18:40:40+00:00</published><updated>2023-10-14T18:40:40+00:00</updated><id>https://balasubramanyamlanka.com/understanding-network-timeouts-connectionRequestTimeout-connectionTimeout-socketTimeout</id><content type="html" xml:base="https://balasubramanyamlanka.com/understanding-network-timeouts-connectionRequestTimeout-connectionTimeout-socketTimeout/"><![CDATA[<p>Networking in the digital realm is akin to a dance, where precise timing is key. In this intricate choreography, timeouts play a crucial role. You might have heard of terms like <code class="language-plaintext highlighter-rouge">connectionRequestTimeout</code>, <code class="language-plaintext highlighter-rouge">connectionTimeout</code>, and <code class="language-plaintext highlighter-rouge">socketTimeout</code>, but understanding them deeply can vastly improve your application’s performance and user experience. Let’s embark on a journey to master these essential parameters.</p> <h2 id="connectionrequesttimeout"><strong>connectionRequestTimeout</strong></h2> <p>Imagine you’re at a party, and you need to join a group for a game. You don’t want to wait indefinitely for a spot to open up. That’s where <code class="language-plaintext highlighter-rouge">connectionRequestTimeout</code> steps in. It sets a time limit for how long your application will wait to get a connection from a connection pool.</p> <h3 id="scenario">Scenario</h3> <p>Suppose you’re building a web scraper. It needs to fetch data from multiple sources concurrently. Instead of establishing a new connection every time, you have a connection pool. When a request is made, the scraper checks if there’s an available connection in the pool. If not, it waits for a bit. This “bit” is determined by <code class="language-plaintext highlighter-rouge">connectionRequestTimeout</code>.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">CloseableHttpClient</span> <span class="n">httpClient</span> <span class="o">=</span> <span class="nc">HttpClients</span><span class="o">.</span><span class="na">custom</span><span class="o">()</span>
        <span class="o">.</span><span class="na">setConnectionRequestTimeout</span><span class="o">(</span><span class="mi">5000</span><span class="o">)</span> <span class="c1">// Wait for 5 seconds</span>
        <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</code></pre></div></div> <h2 id="connectiontimeout"><strong>connectionTimeout</strong></h2> <p>You’ve got an invite to a party, and you’re excited to go. But, if you knock on the door and no one answers, you don’t want to stand there forever. That’s where <code class="language-plaintext highlighter-rouge">connectionTimeout</code> comes into play. It sets a maximum time for your application to establish a connection with the target server.</p> <h3 id="scenario-1">Scenario</h3> <p>Let’s say you’re building a weather app that fetches real-time data from various servers. When a user opens the app, it starts connecting to these servers. If a server is down or there are network issues, you don’t want the app to hang indefinitely. <code class="language-plaintext highlighter-rouge">connectionTimeout</code> ensures it moves on after a reasonable wait.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">CloseableHttpClient</span> <span class="n">httpClient</span> <span class="o">=</span> <span class="nc">HttpClients</span><span class="o">.</span><span class="na">custom</span><span class="o">()</span>
        <span class="o">.</span><span class="na">setConnectTimeout</span><span class="o">(</span><span class="mi">3000</span><span class="o">)</span> <span class="c1">// Give it 3 seconds</span>
        <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</code></pre></div></div> <h2 id="sockettimeout"><strong>socketTimeout</strong></h2> <p>You’re at the party, you’ve joined the group, and now you’re playing a game. But if the game stalls, you don’t want to be stuck there forever. <code class="language-plaintext highlighter-rouge">socketTimeout</code> takes care of this. It defines the maximum time your application will wait for data after the connection is established.</p> <h3 id="scenario-2">Scenario</h3> <p>Imagine you’re building a chat application. When a user sends a message, the app opens a connection to the server to deliver it. If there’s a delay in receiving a response, you don’t want the app to hang. <code class="language-plaintext highlighter-rouge">socketTimeout</code> ensures it gives up after a reasonable wait.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">CloseableHttpClient</span> <span class="n">httpClient</span> <span class="o">=</span> <span class="nc">HttpClients</span><span class="o">.</span><span class="na">custom</span><span class="o">()</span>
        <span class="o">.</span><span class="na">setSocketTimeout</span><span class="o">(</span><span class="mi">10000</span><span class="o">)</span> <span class="c1">// Wait for 10 seconds</span>
        <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</code></pre></div></div> <h2 id="fine-tuning-best-practices"><strong>Fine-Tuning: Best Practices</strong></h2> <p>Now that you’ve got the basics down, let’s refine our moves.</p> <h3 id="1-finding-the-right-rhythm">1. Finding the Right Rhythm</h3> <p>The ideal timeout values can vary based on factors like network conditions and server responsiveness. Experiment and test to discover what works best for your specific application.</p> <h3 id="2-graceful-recovery">2. Graceful Recovery</h3> <p>In scenarios where timeouts occur, it’s crucial to implement proper exception handling. This ensures that your application responds gracefully instead of crashing.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="o">{</span>
    <span class="c1">// Perform HTTP request</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">ConnectTimeoutException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// Handle connection timeout</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">SocketTimeoutException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// Handle socket timeout</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// Handle other IO exceptions</span>
<span class="o">}</span>
</code></pre></div></div> <h3 id="3-fallback-plans">3. Fallback Plans</h3> <p>Consider implementing fallback mechanisms. If a timeout occurs, your application can switch to an alternative approach or provide a user-friendly error message.</p> <h3 id="4-keeping-an-eye-on-the-clock">4. Keeping an Eye on the Clock</h3> <p>Implement robust logging mechanisms to track timeout occurrences. This can be invaluable for identifying potential bottlenecks and fine-tuning timeout values.</p> <h2 id="final-thoughts"><strong>Final Thoughts</strong></h2> <p>With <code class="language-plaintext highlighter-rouge">connectionRequestTimeout</code>, <code class="language-plaintext highlighter-rouge">connectionTimeout</code>, and <code class="language-plaintext highlighter-rouge">socketTimeout</code>, you’re now equipped to navigate the dynamic landscape of network communications. These timeouts are powerful tools, but like any dance, they require practice and finesse. Fine-tune them, handle exceptions gracefully, and always be aware of the clock. Your applications will be dancing through networking challenges in no time!</p>]]></content><author><name></name></author><category term="Web Development"/><category term="http"/><category term="https"/><category term="connectionRequestTimeout"/><category term="connectionTimeout"/><category term="socketTimeout"/><summary type="html"><![CDATA[Differences between connectionRequestTimeout, connectionTimeout, and socketTimeout in networking. Learn how these parameters influence connection establishment, pool management, and data transmission in HTTP client libraries.]]></summary></entry><entry><title type="html">Different BRMS Tools in Market</title><link href="https://balasubramanyamlanka.com/different-brms-tools-market/" rel="alternate" type="text/html" title="Different BRMS Tools in Market"/><published>2016-09-27T18:40:40+00:00</published><updated>2016-09-27T18:40:40+00:00</updated><id>https://balasubramanyamlanka.com/different-brms-tools-market</id><content type="html" xml:base="https://balasubramanyamlanka.com/different-brms-tools-market/"><![CDATA[<p>There are many vendors in the market who provide BRMS tools with a lot number of features with different pricing, standalone platforms, integrated suites and open source projects.</p> <p>Ranking of the BRMS tools those are available in the market it difficult. The competition between products revolves around the relationships with vendors or price competition according to the Forrester Analyst John Rymer. There are many factors on which a tool can be selected out of many factors. Some of them are cost, Platform support( Java/.net/cobol/etc), less dependence on IT department/Development, analytics and more complex event processing and many. Depending on the different requirements a tool will be selected.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/collage-1024x1024-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/collage-1024x1024-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/collage-1024x1024-1400.webp"/> <img src="/assets/img/blog/collage-1024x1024.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Hence it is difficult to say that some tools are best and others are not. Here in this article, I have collected different BRMS tools from different vendors that serve the purpose according to their needs. I have categorized all the BRMS tools into three categories.</p> <blockquote> <p>The majority of the BRMS tools are java based, hence I categorized first one as Rich .Net Choice, second as Strongest Standalone Products and third as Open Source Tools.</p> </blockquote> <h2 id="rich-net-choice">Rich .Net Choice</h2> <p>As the majority of the BRMS tools available in the market are based on Java, .Net projects have a limited support. <a href="http://www.inrule.com/"> <em><strong>InRule BRMS tool</strong></em></a> provides exclusive support for the .NET background. Some of its products are</p> <ul> <li>InRule for Javascript</li> <li>InRule for Microsoft Azure(Cloud)</li> <li>InRule for Microsoft Dynamics CRM</li> </ul> <h2 id="strongest-standalone-products">Strongest Standalone Products</h2> <p>The tools categorized in this category have the strong set of features and the well-built components that support more business by minimizing IT maintenance costs.</p> <ul> <li>IBM’s BRMS, <a href="http://www-03.ibm.com/software/products/en/odm"><em><strong>Operations Decision Manager (ODM)</strong></em></a> which is previously called as Ilog JRules has a very rich feature set and relatively high price tag. IBM ODM suits more for those who look for analytics and complex event processing.</li> <li>FICO’s BRMS, <a href="http://www.fico.com/en/products/fico-blaze-advisor-decision-rules-management-system"><em><strong>Blaze Advisor</strong></em></a> also has the rich set of features with some decent pricing. As per some news, I gathered, some financial firms always favor FICO Blaze Advisor it seems.</li> <li>Progress’s BRMS, <a href="https://www.progress.com/corticon"><em><strong>Corticon</strong></em></a> have some well-built components at lower pricing than the ODM and Blaze.</li> <li>Recent days, there is a new tool introduced by Sparkling Logic called as the <a href="http://www.sparklinglogic.com/"><em><strong>SMARTS</strong></em></a> Decision Manager and PENCIL Decision Modeler. One of the interesting aspect of these tools is that Charles Forgy, inventor of RETE Algorithm is the main Advisor for SMARTS. Forgy developed a new generation of the RETE Algorithm called RETE-NT, which was claimed that it is 500 times faster than the original RETE Algorithm and 10 times faster than its predecessor RETE II. RETE-NT is the inference engine of the SMARTS product.</li> </ul> <h2 id="open-source-tools">Open Source Tools</h2> <p>Open source rule engines and rule management suites tend to be more developer focussed. Once the framework/architecture is built, these open source rule engines serve the purpose. But they lack in the advanced features provided by IBM, FICO, Progress, etc.</p> <ul> <li>Red hat’s JBOSS is the commercial distribution of the open-source BRMS tool <a href="http://www.drools.org/"><em><strong>DROOLS</strong></em></a>.</li> <li><a href="http://openrules.com/"><em><strong>OpenRules</strong></em></a> which is more simple and provides users to keep their Business rules in google docs or excel spreadsheets. This will be suitable for small business applications effectively.</li> <li><a href="http://www.jessrules.com/jess/index.shtml"><em><strong>JESS 7</strong></em></a>, is another open source rule engine which is suitable for the small scale business applications.</li> </ul> <p>These are the different BRMS tools available from different vendors in the current market. Happy Learning! Happy Exploring!!</p>]]></content><author><name></name></author><category term="BRMS"/><category term="brms"/><summary type="html"><![CDATA[There are many vendors in the market who provide BRMS tools with a lot number of features with different pricing, standalone platforms, integrated suites and open source projects.]]></summary></entry><entry><title type="html">Applications of BRMS in the Real World</title><link href="https://balasubramanyamlanka.com/applications-brms-real-world/" rel="alternate" type="text/html" title="Applications of BRMS in the Real World"/><published>2016-09-27T17:10:09+00:00</published><updated>2016-09-27T17:10:09+00:00</updated><id>https://balasubramanyamlanka.com/applications-brms-real-world</id><content type="html" xml:base="https://balasubramanyamlanka.com/applications-brms-real-world/"><![CDATA[<p>The main goal of BRMS is externalizing the Bussiness Condition Logic from the application code so that condition logics( technically called as rules) can be organized easily without disturbing the application. BRMS reduces the application developer dependency. A business user can directly edit business condition rules using BRMS. Some of the applications of brms are given below –</p> <h2 id="banking">Banking</h2> <p>loan origination, cross-sell offer management, payment fee calculations, credit risk decisions, etc.</p> <h2 id="capital-markets">Capital Markets</h2> <p>trade order validation, account onboarding, anti-money laundering compliance, general ledger data validation, etc.</p> <h2 id="healthcare-and-life-sciences">Healthcare and Life Sciences</h2> <p>clinical support, drug interaction assessment, clinical trails date validation, etc.</p> <h2 id="insurance">Insurance</h2> <p>policy underwriting, claims processing, risk rating, commission calculations, form attachments, etc.</p> <h2 id="manufacturing">Manufacturing</h2> <p>order configuration, validation, contract-based billing, order prioritization, etc.</p> <h2 id="public-sector">Public Sector</h2> <p>services entitlement and benefits calculation, tax-fraud assessment, homeland security screening, etc.</p> <h2 id="retail">Retail</h2> <p>online registration, loyalty programs, offers management, etc.</p> <h2 id="telecom">Telecom</h2> <p>offer configuration, service prioritization and assignment, cross-network billing, etc.</p> <h2 id="travel-and-transportation">Travel and Transportation</h2> <p>loyalty programs, contract based billing management, ticket pricing, etc.</p> <p>Happy Learning! Happy Exploring!!</p>]]></content><author><name>Bala Subramanyam Lanka</name></author><category term="BRMS"/><category term="brms"/><summary type="html"><![CDATA[The main goal of BRMS is externalizing the Bussiness Condition Logic from the application code so that condition logics(technically called as rules) can be organized easily without disturbing the application.]]></summary></entry><entry><title type="html">Business Rule Management System (BRMS)</title><link href="https://balasubramanyamlanka.com/business-rule-management-system-brms/" rel="alternate" type="text/html" title="Business Rule Management System (BRMS)"/><published>2016-09-27T16:26:10+00:00</published><updated>2016-09-27T16:26:10+00:00</updated><id>https://balasubramanyamlanka.com/business-rule-management-system-brms</id><content type="html" xml:base="https://balasubramanyamlanka.com/business-rule-management-system-brms/"><![CDATA[<p>Business Rule Management System (BRMS) is an integrated application development and execution platform that allows organizations to define, deploy and monitor and maintain the vast variety of Automated decisions used by operational systems. A BRMS allows decision logic to be extracted and managed separately from core application code, so that it can be easily understood, maintained and reused access the organization.</p> <p>The definition that is given in the above para is in technical terms. To define BRMS in the more general way –<em><strong>Externalizing the Business Condition Logic from the application code so that condition logics(technically called as rules) can be organized easily without disturbing the application.</strong></em> BRMS reduces the application developer dependency. A business user can directly edit business condition rules using BRMS.</p> <h2 id="components-of-business-rule-management-system">Components of Business Rule Management System</h2> <p>Business Rule Management System should include at least three primary components.<figure id="attachment_1494" aria-describedby="caption-attachment-1494" style="width: 840px" class="wp-caption aligncenter"></figure></p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/Components-of-BRMS-1024x897-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/Components-of-BRMS-1024x897-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/Components-of-BRMS-1024x897-1400.webp"/> <img src="/assets/img/blog/Components-of-BRMS-1024x897.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="rule-repository">Rule Repository</h3> <p>A repository allowing rules to be externalized from core application code. The repository allows decision logic to be managed as an enterprise asset, making it easier to understand and update automated, operational decisions. This rule repository also helps in reusing the rule information across the application.</p> <h3 id="tools-for-both-technical-and-non-technical-users-to-define-and-manage-decision-logic-in-repository">Tools for both technical and non-technical users to define and manage decision logic in repository</h3> <p>These tools give the business function the ability to define rules that will guide the behavior of operational systems. These tools will facilitate collaboration between the technical and business on application maintenance and development.</p> <h3 id="runtime-engine">Runtime Engine</h3> <p>A runtime engine allowing systems to access and execute of rules in the engine will be based on specific execution algorithms.</p> <p>Happy Learning! Happy Exploring!!</p>]]></content><author><name></name></author><category term="BRMS"/><category term="brms"/><summary type="html"><![CDATA[Business Rule Management System (BRMS) is an integrated application development and execution platform that allows organizations to define, deploy and monitor and maintain the vast variety of Automated decisions used by operational systems.]]></summary></entry><entry><title type="html">RetePlus Algorithm with Example – IBM ODM</title><link href="https://balasubramanyamlanka.com/reteplus-algorithm-example/" rel="alternate" type="text/html" title="RetePlus Algorithm with Example – IBM ODM"/><published>2016-06-04T20:00:23+00:00</published><updated>2016-06-04T20:00:23+00:00</updated><id>https://balasubramanyamlanka.com/reteplus-algorithm-example</id><content type="html" xml:base="https://balasubramanyamlanka.com/reteplus-algorithm-example/"><![CDATA[<p>RetePlus algorithm is one of the <a href="http://www.balasubramanyamlanka.com/rule-engine-execution-modes/">execution modes</a> in IBM ODM which is based on <a href="http://www.balasubramanyamlanka.com/rete-algorithm/">Rete algorithm</a>. It works based on working memory, agenda creation, supports negative patterns, object notification, and Logical Objects. Use RetePlus optimization techniques to improve performance through reduction of the number of rules and conditions, computation of the rules to run, and prioritization of the rule order.</p> <h2 id="working-of-reteplus-algorithm">Working of RetePlus Algorithm</h2> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/Working-of-RetePlus-Algorithm-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/Working-of-RetePlus-Algorithm-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/Working-of-RetePlus-Algorithm-1400.webp"/> <img src="/assets/img/blog/Working-of-RetePlus-Algorithm.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="step-1">Step 1</h3> <p>First, all the objects are loaded into the working memory. We call these objects as working memory objects.</p> <h3 id="step-2">Step 2</h3> <p>Rule Engine matches the rules with working memory objects.</p> <h3 id="step-3">Step 3</h3> <p>During this Pattern matching process, RetePlus algorithm creates a network based on semantic relationships between rule condition tests.</p> <h3 id="step-4">Step 4</h3> <p>If a rule got matched with the working memory objects, then the rule instance is created and added to the Agenda.</p> <h5 id="1-then-based-on-the-ordering-properties-agenda-selects-the-rule-instance-to-trigger">1. Then based on the Ordering properties, agenda selects the rule instance to trigger.</h5> <h5 id="2-the-rule-action-of-the-rule-gets-triggered">2. The rule action of the rule gets triggered.</h5> <h5 id="3-when-the-rules-are-firing-sometimes-there-comes-a-situation-where-the-working-memory-objects-get-updated-the-rule-action-can-modify-the-working-memory-objects-in-the-following-way">3. When the rules are firing, sometimes there comes a situation where the working memory objects get updated. The rule action can modify the working memory objects in the following way:</h5> <ul> <li>By adding an object to the working memory</li> <li>By removing an object from the working memory</li> <li>By modifying the attributes of an existing object.</li> </ul> <h5 id="4-whenever-the-working-memory-objects-get-updated-then-rule-engine-repeats-the-pattern-matching-process">4. Whenever the working memory objects get updated, then rule engine repeats the pattern matching process.</h5> <h5 id="5-it-reassesses-matches-after-each-rule-instance-is-run-and-modifies-the-data-as-a-possible-consequence-the-list-of-rule-instances-in-the-agenda-can-change">5. It reassesses matches after each rule instance is run and modifies the data. As a possible consequence, the list of rule instances in the agenda can change.</h5> <h5 id="6-thus-this-algorithm-is-incremental-and-data-driven">6. Thus, this algorithm is incremental and data-driven.</h5> <h5 id="7-this-algorithm-is-based-on-an-inference-process-that-the-sequential-and-fastpath-algorithms-do-not-support-in-ibm-odm">7. This algorithm is based on an inference process that the sequential and FastPath algorithms do not support in IBM ODM.</h5> <h5 id="8-this-algorithm-had-five-main-sections-they-are">8. This algorithm had five main sections. They are:</h5> <ul> <li>Working Memory</li> <li>Agenda</li> <li>Negative Patterns</li> <li>Object Notifications</li> <li>Network Operation</li> </ul> <h2 id="working-memory">Working Memory</h2> <p>Each Rule engine in the Decision server is paired with a working memory. The working memory contains all the objects contained in the associated IlrContext object (base class of all the execution contexts. Rules can be executed only within an execution context.). You can modify the working memory by adding a statement in the <em class="ph i">action part of a rule</em> or by using the Application Programming Interface (API).</p> <p>Thus, the rule engine is aware of the objects that are in the working memory and any objects that are linked to them. The rule engine can use only objects that are accessible from the working memory. Use the following methods to manage the working memory:</p> <ol> <li>insert</li> <li>retract</li> <li>update</li> <li>updateContext</li> <li>enumerateObjects</li> <li>getObjects</li> </ol> <p>Check <a href="https://www.ibm.com/support/knowledgecenter/en/SSQP76_8.5.1/com.ibm.odm.dserver.rules.ref.res/html/api/html/ilog/rules/engine/IlrContext.html?view=embed#insert(java.lang.Object)">here</a> for better understanding of the methods given above.</p> <h3 id="agenda">Agenda</h3> <p>The agenda is where <span class="keyword">Decision Server</span> stores the rules whose patterns are all matched. Any rule that enters the agenda is said to be instantiated, it becomes a rule instance<em class="ph i">. </em></p> <p class="p"> The agenda stores rule instances that are eligible to be executed. If the agenda is empty, the execution has no effect. Rule instances placed in the agenda are said to be eligible. Often, in the agenda, several rules are eligible. Consequently, the rule engine has to have some way of deciding which particular rule in the agenda should be executed. </p> <h3 id="negative-patterns">Negative Patterns</h3> <p>Negative Patterns are used for expressing the non-existence of a particular type of objects in the working memory. Generally, positive patterns are checked with the objects present in the working memory, By using these negative patterns in this algorithm we can reduce checking for all the patterns with the objects available.</p> <p>For specifying the negative patterns in the working memory, we should use <strong><em>“not”</em></strong> keyword prior to the condition of the objects.</p> <h3 id="object-notifications">Object Notifications</h3> <p>We have four statements to control the individual operations of the objects in the working memory. Operations include – Object insertion, Object removal, Object Update and Attribute modification.</p> <h3 id="reteplus-network-operation">RetePlus network operation</h3> <p class="p"> The RetePlus network indexes rules so as to minimize the number of rules and conditions that need to be evaluated whenever the working memory is changed. The network minimizes the number of evaluations by sharing tests between rules and propagating changes incrementally. When all the tests have been completed, the network designates a rule. </p> <p class="p"> A RetePlus network can be represented as a graph composed of three zones: </p> <p class="p"> <span style="text-decoration: underline;"><strong>Discrimination tree</strong></span> </p> <p class="p"> A discrimination tree is a pattern-matching process that performs tests. These tests are represented by diamond shapes at the top of the network. The tests concern the classes of objects and the values of their attributes. Input to this tree consists of tokens representing each of the current objects in the working memory. When the pattern deals with only one object and its attributes, it is said to be a discrimination test. When it is a combination, it is called a join; these appear in the lower part of the graph. </p> <p class="p"> <span style="text-decoration: underline;"><strong>Alpha nodes</strong></span> </p> <p class="p"> An alpha node is formed at the next level of the network, for each token that passes the tests of the discrimination tree. Each node is composed of one or several tokens, represented by round-cornered rectangles (there are three alpha nodes in the figure). One alpha node contains two B-class tokens. The other two nodes contain only one class token each—A-class and C-class tokens, respectively. </p> <p class="p"> <span style="text-decoration: underline;"><strong>Tests and tuples</strong></span> </p> <p class="p"> The third zone of the network matches tokens of several classes of objects. The resulting nodes are known as tuples, which will be made up of several tokens. The equality test between attributes a2 and b3 gives rise to a node composed of two pairs of tokens, and the test between attributes b2 and c1 then filters out a triplet of tokens. In a RetePlus network, we often refer to tuples of this kind as join nodes. </p> <h2 id="reteplus-execution-example">RetePlus Execution Example</h2> <h6 id="lets-imagine-that-there-are-two-rules-as-shown-below">Let’s imagine that there are two rules as shown below.</h6> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/RetePlus-Example-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/RetePlus-Example-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/RetePlus-Example-1400.webp"/> <img src="/assets/img/blog/RetePlus-Example.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h6 id="now-objects-are-loaded-into-the-working-memory">Now objects are loaded into the Working Memory.</h6> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/Objects-are-loaded-into-Working-memory-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/Objects-are-loaded-into-Working-memory-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/Objects-are-loaded-into-Working-memory-1400.webp"/> <img src="/assets/img/blog/Objects-are-loaded-into-Working-memory.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h6 id="now-pattern-matching-happens-and-if-rules-get-matched-with-the-objects-rule-instances-are-created-and-added-to-the-agenda">Now pattern matching happens and if rules get matched with the objects, rule instances are created and added to the agenda.</h6> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/Agenda-gets-created-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/Agenda-gets-created-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/Agenda-gets-created-1400.webp"/> <img src="/assets/img/blog/Agenda-gets-created.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h6 id="working-memory-objects-get-updated-with-new-values-that-got-fired-from-the-agenda">Working memory objects get updated with new values that got fired from the agenda.</h6> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/Working-Memory-objects-get-updated-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/Working-Memory-objects-get-updated-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/Working-Memory-objects-get-updated-1400.webp"/> <img src="/assets/img/blog/Working-Memory-objects-get-updated.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h6 id="rule-firing-continues">Rule firing continues.</h6> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/Other-rules-in-agenda-continues-to-fire-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/Other-rules-in-agenda-continues-to-fire-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/Other-rules-in-agenda-continues-to-fire-1400.webp"/> <img src="/assets/img/blog/Other-rules-in-agenda-continues-to-fire.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h6 id="in-the-end-when-no-rules-get-matched-with-the-working-memory-objects-rule-firing-stops">In the end, when no rules get matched with the Working memory objects, rule firing stops.</h6> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/Agenda-and-Working-memory-in-the-end-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/Agenda-and-Working-memory-in-the-end-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/Agenda-and-Working-memory-in-the-end-1400.webp"/> <img src="/assets/img/blog/Agenda-and-Working-memory-in-the-end.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h2 id="wrapping-up">Wrapping Up</h2> <p>Well, thats all about the RetePlus Algorithm! Feel free to comment your thoughts in the comments section below. Happy learning! Happy Exploring!!&lt;/li&gt; &lt;/ol&gt;</p> <h2 id="references">References</h2> <p><em><a href="https://www.ibm.com/support/knowledgecenter/SSQP76_8.5.1/com.ibm.odm.dserver.rules.designer.debug/optimizing_topics/tpc_opt_reteplusalgo.html">https://www.ibm.com/support/knowledgecenter/SSQP76_8.5.1/com.ibm.odm.dserver.rules.designer.debug/optimizing_topics/tpc_opt_reteplusalgo.html</a></em></p>]]></content><author><name>Bala Subramanyam Lanka</name></author><category term="Algorithms"/><category term="ODM"/><category term="reteplus-algorithm"/><summary type="html"><![CDATA[RetePlus algorithm is one of the execution modes in IBM ODM which is based on Rete algorithm. It works based on working memory, agenda creation, supports negative patterns, object notification, and Logical Objects.]]></summary></entry><entry><title type="html">Synchronizing Rules and RuleDocs – Rule Solutions for Office, ODM</title><link href="https://balasubramanyamlanka.com/synchronising-rules-ruledocs-rule-solutions-office/" rel="alternate" type="text/html" title="Synchronizing Rules and RuleDocs – Rule Solutions for Office, ODM"/><published>2016-06-02T20:25:15+00:00</published><updated>2016-06-02T20:25:15+00:00</updated><id>https://balasubramanyamlanka.com/synchronising-rules-ruledocs-rule-solutions-office</id><content type="html" xml:base="https://balasubramanyamlanka.com/synchronising-rules-ruledocs-rule-solutions-office/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>RuleDocs are Microsoft Office documents that contain your rules, decision tables, and ruleflows. Rules and ruleflows are stored in Word documents, while decision tables are stored as spreadsheets in Excel. We use t to edit and manage rules offline. You can also use them to present the rules together with documentation and supporting information, including the original policy or requirement.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/rules-ruledocs-rule-solutions-office-ibm-odm-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/rules-ruledocs-rule-solutions-office-ibm-odm-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/rules-ruledocs-rule-solutions-office-ibm-odm-1400.webp"/> <img src="/assets/img/blog/rules-ruledocs-rule-solutions-office-ibm-odm.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>You can store your RuleDocs at a location that is accessible to multiple users. Other users can then open RuleDocs for editing without accessing the <span class="keyword">Decision Center</span> console.</p> <blockquote> <p>To use these docs to edit your rules, you must set file associations for <span class="ph filepath">.docx</span> and <span class="ph filepath">.xlsx</span> to Microsoft Office Word and Excel, not just with the Microsoft Word and Excel viewers.</p> </blockquote> <h2 id="decision-center---publish-and-update">Decision Center - Publish and Update</h2> <p>When you work with these Docs in this way, you publish and update them from <span class="keyword">Decision Center</span> to make sure that the rules in <span class="keyword">Decision Center</span> and those in your Docs remain synchronized.</p> <ol> <li><strong>Publish</strong>: To send the rules from Decision Center to RuleDocs on a file system.</li> <li><strong>Update</strong>: To save any changes made to your RuleDocs back to Decision Center</li> </ol> <p>When we download Rule Solutions for office, we will be able to see menu added to the Microsoft Word and Microsoft Excel. Rules menu will be added for Word and Decision Table Menu will be added to the Excel. Note that these menus can be seen only when the rules were published to the RuleDocs.<figure id="attachment_1424" aria-describedby="caption-attachment-1424" style="width: 840px" class="wp-caption aligncenter"></figure></p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/rule-solutions-for-office-1024x294-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/rule-solutions-for-office-1024x294-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/rule-solutions-for-office-1024x294-1400.webp"/> <img src="/assets/img/blog/rule-solutions-for-office-1024x294.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p class="shortdesc"> <a href="http://www.balasubramanyamlanka.com/rule-solutions-office-installation-odm/"><span class="keyword">Rule Solutions for Office</span></a> supports different versions of Office. <span class="keyword">Rule Solutions for Office</span> works with Versions 2007 and 2010 of Microsoft Excel and Word. When you install <span class="keyword">Rule Solutions for Office</span>, you extend Excel and Word with add-ins that provide rule viewing, editing and management features for the RuleDocs. </p> <h2 id="publish-rules-to-ruledocs">Publish rules to Ruledocs:</h2> <h3 id="step-1">Step 1</h3> <p>Open Decision Center, Select your project. In this case project, name is MyFirstProject_rules</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/Decision-Center-1024x621-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/Decision-Center-1024x621-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/Decision-Center-1024x621-1400.webp"/> <img src="/assets/img/blog/Decision-Center-1024x621.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="step-2">Step 2</h3> <p>Go to the project tab in decision center and select Publish Rules to RuleDocs in Rule Solutions for Office Section.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/Decision-Center-Project-Tab-1024x628-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/Decision-Center-Project-Tab-1024x628-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/Decision-Center-Project-Tab-1024x628-1400.webp"/> <img src="/assets/img/blog/Decision-Center-Project-Tab-1024x628.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="step-3">Step 3</h3> <p>Three sub steps here</p> <h4 id="step-13">Step 1/3</h4> <p>Specify the local destination folder in Publish rules to RuleDocs (1/3) and click on next. Here we specify where we want to publish the RuleDoc and then edit the RuleDocs. In the <strong><span class="ph uicontrol">Publication location</span></strong> field, select a location from the drop-down list. The Configuration Manager must have created the location beforehand. In the <strong><span class="ph uicontrol">Additional path</span></strong> field, add any required subfolders to this location.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/Publishing-rules-to-RuleDocs-1-1024x628-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/Publishing-rules-to-RuleDocs-1-1024x628-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/Publishing-rules-to-RuleDocs-1-1024x628-1400.webp"/> <img src="/assets/img/blog/Publishing-rules-to-RuleDocs-1-1024x628.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h4 id="step-23">Step 2/3</h4> <p>Select the options for the RuleDocs in Publish rules to RuleDocs (2/3) and then click on next. Here, we specify which rules to include, how your RuleDoc is to be organized, and the locale. By default, all action rules, decision tables, and ruleflows of the current project are published to these Docs. However, you can select a subset based on an existing query. If you select a query when republishing to the same location, only rules selected by the query are published. This means that changes to rules in either <span class="keyword">Decision Center</span> or in the RuleDocs are taken into account if the query does not select those rules.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/Publishing-rules-to-RuleDocs-2-1024x629-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/Publishing-rules-to-RuleDocs-2-1024x629-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/Publishing-rules-to-RuleDocs-2-1024x629-1400.webp"/> <img src="/assets/img/blog/Publishing-rules-to-RuleDocs-2-1024x629.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h4 id="step-33">Step 3/3</h4> <p>Specify the actions to take for each rule in Publish rules to RuleDocs (3/3) and then click next. At the start of this step, <span class="keyword">Decision Center</span> displays a table comparing the synchronization state between the rules in <span class="keyword">Decision Center</span> and the folder location to which you are publishing and proposes an action to take for each rule. For example, during an initial publish, no RuleDocs exist at the publication location, so all actions are <span class="ph uicontrol">Add rule in <span class="keyword">Rule Solutions for Office.</span></span></p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/Publishing-rules-to-RuleDocs-3-1024x630-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/Publishing-rules-to-RuleDocs-3-1024x630-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/Publishing-rules-to-RuleDocs-3-1024x630-1400.webp"/> <img src="/assets/img/blog/Publishing-rules-to-RuleDocs-3-1024x630.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="step-4">Step 4</h3> <p>Publishing status</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/Publishing-Status-1024x625-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/Publishing-Status-1024x625-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/Publishing-Status-1024x625-1400.webp"/> <img src="/assets/img/blog/Publishing-Status-1024x625.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Now all the rules from the project will be converted into the RuleDocs and saved to the local computer destination provided while publishing.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/RuleDocs-saved-to-specified-local-destination-1024x681-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/RuleDocs-saved-to-specified-local-destination-1024x681-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/RuleDocs-saved-to-specified-local-destination-1024x681-1400.webp"/> <img src="/assets/img/blog/RuleDocs-saved-to-specified-local-destination-1024x681.png" class=" img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Now all the rules from the decision center are converted into the Rule Docs and saved into our local system folder. We can now start working offline with the rules. We can Update them, add new entries in decision tables, delete some of the rules, modify the rule flow.<figure id="attachment_1452" aria-describedby="caption-attachment-1452" style="width: 840px" class="wp-caption aligncenter"></figure></p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/Decision-Table-in-Microsoft-Excel-xslx-1024x593-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/Decision-Table-in-Microsoft-Excel-xslx-1024x593-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/Decision-Table-in-Microsoft-Excel-xslx-1024x593-1400.webp"/> <img src="/assets/img/blog/Decision-Table-in-Microsoft-Excel-xslx-1024x593.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>All the changes that are done to these docs are saved locally in the specified location. Once we complete all our changes we can again update the decision center with all these changes. Let’s see how to Update the rules from the RuleDocs.</p> <h2 id="update-rules-from-ruledocs">Update rules from RuleDocs</h2> <p>Let’s assume that we have added some entries to the decision table of the project. For updating the rules with changes of RuleDocs in local:</p> <h3 id="step-1-1">Step 1</h3> <p>Open the Decision center, select our project on the home page then select project tab. Now select Update rules from RuleDocs in the Rule Solutions for Office section.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/Decision-Center-Project-Tab-1024x628-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/Decision-Center-Project-Tab-1024x628-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/Decision-Center-Project-Tab-1024x628-1400.webp"/> <img src="/assets/img/blog/Decision-Center-Project-Tab-1024x628.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="step-2-1">Step 2</h3> <p>In the next page specify the local docs path for updating the rules in Update rules from RuleDocs (1/2) section and then click next.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/Update-rules-from-RuleDocs-12-1024x624-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/Update-rules-from-RuleDocs-12-1024x624-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/Update-rules-from-RuleDocs-12-1024x624-1400.webp"/> <img src="/assets/img/blog/Update-rules-from-RuleDocs-12-1024x624.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="step-3-1">Step 3</h3> <p>Select the rules that should be updated into the rules from Update rules from RuleDocs (2/2) section and then click finish.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/Update-rules-from-RuleDocs-22-1024x626-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/Update-rules-from-RuleDocs-22-1024x626-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/Update-rules-from-RuleDocs-22-1024x626-1400.webp"/> <img src="/assets/img/blog/Update-rules-from-RuleDocs-22-1024x626.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="step-4-1">Step 4</h3> <p>Updating progress.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/Updating-Progress-1024x635-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/Updating-Progress-1024x635-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/Updating-Progress-1024x635-1400.webp"/> <img src="/assets/img/blog/Updating-Progress-1024x635.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="step-5">Step 5</h3> <p>Check your rule in explore tab in the decision center, Vola! It gets updated with the RuleDocs from the local.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/Decision-Table-gets-updated-in-the-Rules-1024x627-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/Decision-Table-gets-updated-in-the-Rules-1024x627-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/Decision-Table-gets-updated-in-the-Rules-1024x627-1400.webp"/> <img src="/assets/img/blog/Decision-Table-gets-updated-in-the-Rules-1024x627.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h2 id="edit-rules-decision-tables-and-ruleflows">Edit Rules, Decision tables, and Ruleflows</h2> <p>Edit Rules, Decision tables, and Ruleflows without publishing and updating rules and docs. We can also use <span class="keyword">Rule Solutions for Office</span> for editing if you want to edit an element without publishing and updating. You can edit action rules, decision tables, and ruleflows.</p> <blockquote> <p>The Configuration Manager must activate the feature for the icons to appear in the rule tables</p> </blockquote> <h3 id="step-1-2">Step 1</h3> <p>On the Explore tab, click Edit this element in Rule Solutions for Office next to the name of the project element in the table (<img class="image" src="https://www.ibm.com/support/knowledgecenter/en/SSQP76_8.7.1/com.ibm.odm.dcenter.bu.econsole/images/icon_edit_word.jpg" alt="Edit in Word"/> for action rules and ruleflows, or <img class="image" src="https://www.ibm.com/support/knowledgecenter/en/SSQP76_8.7.1/com.ibm.odm.dcenter.bu.econsole/images/icon_edit_excel.jpg" alt="Edit in Excel"/> for decision tables).</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/Edit-in-Rule-Solutions-for-Office-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/Edit-in-Rule-Solutions-for-Office-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/Edit-in-Rule-Solutions-for-Office-1400.webp"/> <img src="/assets/img/blog/Edit-in-Rule-Solutions-for-Office.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="step-2-2">Step 2</h3> <p>In the File Download window, click <span class="ph uicontrol">Open</span></p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/Download-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/Download-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/Download-1400.webp"/> <img src="/assets/img/blog/Download.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="step-3-2">Step 3</h3> <p>In the Rule Solutions for Office window, click OK. A RuleDoc containing the contents of the project element opens</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/RuleDoc-opens-with-decisiontable-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/RuleDoc-opens-with-decisiontable-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/RuleDoc-opens-with-decisiontable-1400.webp"/> <img src="/assets/img/blog/RuleDoc-opens-with-decisiontable.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="step-4-2">Step 4</h3> <p>Edit the project element in the RuleDoc. Click check in to commit your changes.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/Update-changes-and-click-check-into-commit-changes-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/Update-changes-and-click-check-into-commit-changes-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/Update-changes-and-click-check-into-commit-changes-1400.webp"/> <img src="/assets/img/blog/Update-changes-and-click-check-into-commit-changes.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="step-5-1">Step 5</h3> <p>Decision Center Authentication for committing the changes.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/Decision-Center-Authentication-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/Decision-Center-Authentication-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/Decision-Center-Authentication-1400.webp"/> <img src="/assets/img/blog/Decision-Center-Authentication.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="step-6">Step 6</h3> <p>Enter the Commit Documentation before checking in the code into the repository. &lt;p&gt;</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/Commit-Documentaion-for-rule-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/Commit-Documentaion-for-rule-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/Commit-Documentaion-for-rule-1400.webp"/> <img src="/assets/img/blog/Commit-Documentaion-for-rule.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="step-7">Step 7</h3> <p>Open the Explore tab in the decision center to check the rule! Yes, the rule gets updated immediately after the commit from Rule Solutions for Office.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/Rule-gets-updated-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/Rule-gets-updated-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/Rule-gets-updated-1400.webp"/> <img src="/assets/img/blog/Rule-gets-updated.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h2 id="wrapping-up">Wrapping Up</h2> <p>Well! I guess that is a very big post about the Rule Solutions for Office and the Docs. I had to make sure that all the information posted here is simple and easily understandable. Feel free to express your ideas or new points in the comments section below. Happy Learning! Happy Exploring!!&lt;/li&gt; &lt;/ol&gt;</p> <h2 id="references">References</h2> <ol> <li><a href="https://www.ibm.com/support/knowledgecenter">https://www.ibm.com/support/knowledgecenter</a></li> <li><a href="https://blogs.perficient.com">https://blogs.perficient.com</a></li> </ol>]]></content><author><name>Bala Subramanyam Lanka</name></author><category term="IBM"/><category term="ODM"/><category term="ruledocs"/><summary type="html"><![CDATA[RuleDocs are Microsoft Office documents that contain your rules, decision tables, and ruleflows. Rules and ruleflows are stored in Word documents, while decision tables are stored as spreadsheets in Excel.]]></summary></entry></feed>